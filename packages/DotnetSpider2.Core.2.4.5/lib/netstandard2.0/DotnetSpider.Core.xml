<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotnetSpider.Core</name>
    </assembly>
    <members>
        <member name="T:DotnetSpider.Core.IAppBase">
            <summary>
            标准任务接口
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.AppBase">
            <summary>
            标准任务的抽象
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.AppBase.Logger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.AppBase.Identity">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.AppBase.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.AppBase.TaskId">
            <summary>
            任务编号
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.AppBase.ExecuteRecord">
            <summary>
            运行记录接口
            程序在运行前应该添加相应的运行记录, 任务结束后删除对应的记录, 企业服务依赖运行记录数据显示正在运行的任务
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.AppBase.RunApp(System.String[])">
            <summary>
            任务的实现
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.AppBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.AppBase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">任务名称</param>
        </member>
        <member name="M:DotnetSpider.Core.AppBase.RunAsync(System.String[])">
            <summary>
            异步运行程序
            </summary>
            <param name="arguments">程序运行参数</param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.AppBase.Run(System.String[])">
            <summary>
            运行程序
            </summary>
            <param name="arguments">程序运行的参数</param>
        </member>
        <member name="T:DotnetSpider.Core.DefaultSpider">
            <summary>
            默认爬虫, 用于测试和一些默认情况使用, 框架使用者可忽略
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.DefaultSpider.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.DefaultSpider.#ctor(System.String,DotnetSpider.Core.Site)">
            <summary>
            构造方法
            </summary>
            <param name="id">爬虫标识</param>
            <param name="site">网站信息</param>
        </member>
        <member name="M:DotnetSpider.Core.DefaultSpider.#ctor(System.String,DotnetSpider.Core.Site,DotnetSpider.Core.Scheduler.IScheduler)">
            <summary>
            构造方法
            </summary>
            <param name="id">爬虫标识</param>
            <param name="site">网站信息</param>
            <param name="scheduler">URL队列</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.AfterDownloadCompleteHandler">
            <summary>
            <see cref="T:DotnetSpider.Core.Downloader.IAfterDownloadCompleteHandler"/>
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Downloader.AfterDownloadCompleteHandler.Logger">
            <summary>
            Log interface
            </summary>
            <summary xml:lang="zh-CN">
            日志接口
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.AfterDownloadCompleteHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            You can process page data, detect download status(whether is banned) and update Cookie here.
            </summary>
            <summary>
            处理页面数据、检测下载情况(是否被反爬)、更新Cookie等操作
            </summary>
            <param name="page"><see cref="T:DotnetSpider.Core.Page"/></param>
            <param name="downloader">下载器 <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/></param>
            <param name="spider"><see cref="T:DotnetSpider.Core.ISpider"/></param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.TargetUrlsHandler">
            <summary>
            We usually extract TargetUrls in <see cref="T:DotnetSpider.Core.Processor.IPageProcessor"/>, here is for some special case like adding multiple <see cref="T:DotnetSpider.Core.Processor.ITargetUrlsExtractor"/> etc.
            </summary>
            <summary xml:lang="zh-CN">
            正常的解析TargetUrls是在Processor中实现的, 此处是用于一些特别情况如可能想添加多个解析器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.TargetUrlsHandler.#ctor(DotnetSpider.Core.Processor.ITargetUrlsExtractor,System.Boolean)">
            <summary>
            Construct a <see cref="T:DotnetSpider.Core.Downloader.TargetUrlsHandler"/> instance.
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
            <param name="targetUrlsExtractor">目标链接解析器 <see cref="T:DotnetSpider.Core.Processor.ITargetUrlsExtractor"/></param>
            <param name="extractByProcessor">Processor是否还需要执行目标链接解析工作(Should <see cref="T:DotnetSpider.Core.Processor.IPageProcessor"/> continue to execute <see cref="T:DotnetSpider.Core.Processor.ITargetUrlsExtractor"/>)</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.TargetUrlsHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Execute <see cref="T:DotnetSpider.Core.Processor.ITargetUrlsExtractor"/>.
            </summary>
            <summary xml:lang="zh-CN">
            执行目标链接解析器
            </summary>
            <param name="page">页面数据 <see cref="T:DotnetSpider.Core.Page"/></param>
            <param name="downloader">下载器 <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/></param>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.TimingUpdateCookieHandler">
            <summary>
            Handler that regularly update cookies.
            </summary>
            <summary xml:lang="zh-CN">
            定时更新Cookie的处理器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.TimingUpdateCookieHandler.#ctor(System.Int32,DotnetSpider.Core.Downloader.ICookieInjector)">
            <summary>
            Construct a <see cref="T:DotnetSpider.Core.Downloader.TimingUpdateCookieHandler"/> instance.
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
            <param name="interval">间隔时间 interval time in second</param>
            <param name="injector">Cookie注入器 <see cref="T:DotnetSpider.Core.Downloader.ICookieInjector"/></param>
            <exception cref="T:System.ArgumentException">dueTime should be large than 0.</exception>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.TimingUpdateCookieHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Update cookies regularly.
            </summary>
            <summary xml:lang="zh-CN">
            定时更新Cookie
            </summary>
            <param name="page">页面数据 <see cref="T:DotnetSpider.Core.Page"/></param>
            <param name="downloader">下载器 <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/></param>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.SkipWhenContainsHandler">
            <summary>
            When <see cref="P:DotnetSpider.Core.Page.Content"/> contains specified content, this <see cref="T:DotnetSpider.Core.Page"/> will be skipped.
            </summary>
            <summary xml:lang="zh-CN">
            当下载的内容包含指定内容时, 直接跳过此链接
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.SkipWhenContainsHandler.#ctor(System.String[])">
            <param name="contains">包含的内容(contents to skip)</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.SkipWhenContainsHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            When <see cref="P:DotnetSpider.Core.Page.Content"/> contains specified content, this <see cref="T:DotnetSpider.Core.Page"/> will be skipped.
            </summary>
            <summary xml:lang="zh-CN">
            如果页面数据包含指定内容, 跳过当前链接
            </summary>
            <param name="page">页面数据 <see cref="T:DotnetSpider.Core.Page"/></param>
            <param name="downloader">下载器 <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/></param>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.PlainTextHandler">
            <summary>
            Handler that removes HTML tags in <see cref="P:DotnetSpider.Core.Page.Content"/>.
            </summary>
            <summary xml:lang="zh-CN">
            去除下载内容中的HTML标签
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.PlainTextHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Remove HTML tags in <see cref="P:DotnetSpider.Core.Page.Content"/>.
            </summary>
            <summary xml:lang="zh-CN">
            去除下载内容中的HTML标签
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.ToUpperHandler">
            <summary>
            Handler that make <see cref="P:DotnetSpider.Core.Page.Content"/> to uppercase.
            </summary>
            <summary xml:lang="zh-CN">
            所有内容转化成大写
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.ToUpperHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            make <see cref="P:DotnetSpider.Core.Page.Content"/> to uppercase.
            </summary>
            <summary xml:lang="zh-CN">
            所有内容转化成大写
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.ToLowerHandler">
            <summary>
            Handler that make <see cref="P:DotnetSpider.Core.Page.Content"/> to lowercase.
            </summary>
            <summary xml:lang="zh-CN">
            所有内容转化成小写
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.ToLowerHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            make <see cref="P:DotnetSpider.Core.Page.Content"/> to lowercase.
            </summary>
            <summary xml:lang="zh-CN">
            所有内容转化成小写
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.ReplaceHandler">
            <summary>
            Handler that replaces contents in <see cref="P:DotnetSpider.Core.Page.Content"/>.
            </summary>
            <summary xml:lang="zh-CN">
            替换内容
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.ReplaceHandler.#ctor(System.String,System.String)">
            <summary>
            Construct a ReplaceHandler
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace all occurrences of oldValue.</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.ReplaceHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Replaces contents in <see cref="P:DotnetSpider.Core.Page.Content"/>.
            </summary>
            <summary xml:lang="zh-CN">
            替换内容
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.TrimHandler">
            <summary>
            Removes all leading and trailing white-space characters from the current content.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.TrimHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Removes all leading and trailing white-space characters from the current content.
            </summary>
            <param name="page">页面数据</param>
            <param name="downloader">下载器</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.UnescapeHandler">
            <summary>
            Converts any escaped characters in current content.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.UnescapeHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Converts any escaped characters in current content.
            </summary>
            <param name="page">页面数据</param>
            <param name="downloader">下载器</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.RegexHandler">
            <summary>
            Searches the current content for all occurrences of a specified regular expression, using the specified matching options.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.RegexHandler.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            构造方法
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that specify options for matching.</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.RegexHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Searches the current content for all occurrences of a specified regular expression, using the specified matching options.
            </summary>
            <param name="page">页面数据</param>
            <param name="downloader">下载器</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.RetryWhenContainsHandler">
            <summary>
            Retry current link when <see cref="P:DotnetSpider.Core.Page.Content"/> contains specified contents.
            </summary>
            <summary xml:lang="zh-CN">
            当包含指定内容时重试当前链接
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.RetryWhenContainsHandler.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
            <param name="contents">包含的内容(specified contents to detect.)</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.RetryWhenContainsHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Retry current link when <see cref="P:DotnetSpider.Core.Page.Content"/> contains specified contents.
            </summary>
            <summary xml:lang="zh-CN">
            当包含指定内容时重试当前链接
            </summary>
            <param name="page">页面数据</param>
            <param name="downloader">下载器</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.RedialWhenContainsHandler">
            <summary>
            Redial ADSL when <see cref="P:DotnetSpider.Core.Page.Content"/> contains specified contents.
            </summary>
            <summary xml:lang="zh-CN">
            当包含指定内容时触发ADSL拨号
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.RedialWhenContainsHandler.#ctor(System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="contents">包含的内容(specified contents to detect.)</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.RedialWhenContainsHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Redial ADSL when <see cref="P:DotnetSpider.Core.Page.Content"/> contains specified contents.
            </summary>
            <summary xml:lang="zh-CN">
            当包含指定内容时触发ADSL拨号
            </summary>
            <param name="page">页面数据</param>
            <param name="downloader">下载器</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.RedialWhenExceptionThrowHandler">
            <summary>
            Redial ADSL when <see cref="P:DotnetSpider.Core.Page.Exception"/> message contains specified exception message.
            </summary>
            <summary xml:lang="zh-CN">
            当页面数据中的异常信息包含指定内容时触发ADSL拨号
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.RedialWhenExceptionThrowHandler.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="exceptionMessage">异常信息(specified exception message)</param>
            <exception cref="T:DotnetSpider.Core.SpiderException"></exception>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.RedialWhenExceptionThrowHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Redial ADSL when <see cref="P:DotnetSpider.Core.Page.Exception"/> message contains specified exception message.
            </summary>
            <summary xml:lang="zh-CN">
            当页面数据中的异常信息包含指定内容时触发ADSL拨号
            </summary>
            <param name="page">页面数据</param>
            <param name="downloader">下载器</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.RedialAndUpdateCookiesWhenContainsHandler">
            <summary>
            Redial ADSL and re-obtain cookie when <see cref="P:DotnetSpider.Core.Page.Content"/> contains specified contents.
            </summary>
            <summary xml:lang="zh-CN">
            当页面数据包含指定内容时触发ADSL拨号, 并且重新获取Cookie
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.RedialAndUpdateCookiesWhenContainsHandler.#ctor(DotnetSpider.Core.Downloader.ICookieInjector,System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="cookieInjector">Cookie注入器 <see cref="T:DotnetSpider.Core.Downloader.ICookieInjector"/></param>
            <param name="contents">包含的内容(specified contents)</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.RedialAndUpdateCookiesWhenContainsHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Redial ADSL and re-obtain cookie when <see cref="P:DotnetSpider.Core.Page.Content"/> contains specified contents.
            </summary>
            <summary xml:lang="zh-CN">
            当页面数据包含指定内容时触发ADSL拨号, 并且重新获取Cookie
            </summary>
            <param name="page">页面数据</param>
            <param name="downloader">下载器</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.CutoutHandler">
            <summary>
            Handler that cutout <see cref="P:DotnetSpider.Core.Page.Content"/>.
            </summary>
            <summary xml:lang="zh-CN">
            截取下载内容的处理器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.CutoutHandler.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Construct a CutoutHandler instance, it will cutout <see cref="P:DotnetSpider.Core.Page.Content"/> from index of <paramref name="startPart"/> 
            with <paramref name="startOffset"/> to index of <paramref name="endPart"/> with <paramref name="endOffset"/>.
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
            <param name="startPart">起始部分的内容</param>
            <param name="endPart">结束部分的内容</param>
            <param name="startOffset">开始截取的偏移</param>
            <param name="endOffset">结束截取的偏移</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.CutoutHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Cutout <see cref="P:DotnetSpider.Core.Page.Content"/>.
            </summary>
            <summary>
            截取下载内容
            </summary>
            <param name="page">页面数据</param>
            <param name="downloader">下载器</param>
            <param name="spider">爬虫</param>
            <exception cref="T:DotnetSpider.Core.SpiderException"></exception>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.BaseDownloader">
            <summary>
            The Abstraction of a basic downloader.
            </summary>
            <summary xml:lang="zh-CN">
            基础下载器的抽象
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Downloader.BaseDownloader.Logger">
            <summary>
            Log interface.
            </summary>
            <summary xml:lang="zh-CN">
            日志接口
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Downloader.BaseDownloader._detectedContentType">
            <summary>
            Whether the downloader should automaticlly detect <see cref="P:DotnetSpider.Core.Site.ContentType"/>.
            </summary>
            <summary xml:lang="zh-CN">
            是否检测过下载内容的类型
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Downloader.BaseDownloader.CookieContainer">
            <summary>
            Cookie Container
            </summary>
            <summary xml:lang="zh-CN">
            Cookie 容器
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Downloader.BaseDownloader.CookieInjector">
            <summary>
            Interface to inject cookie.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.AddCookies(System.String,System.String,System.String)">
            <summary>
            Add cookies to downloader
            </summary>
            <summary xml:lang="zh-CN">
            设置 Cookies
            </summary>
            <param name="cookiesStr">Cookies的键值对字符串, 如: a1=b;a2=c;(Cookie's key-value pairs string, a1=b;a2=c; etc.)</param>
            <param name="domain">作用域(<see cref="P:System.Net.Cookie.Domain"/>)</param>
            <param name="path">作用路径(<see cref="P:System.Net.Cookie.Path"/>)</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.AddCookies(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Add cookies to downloader
            </summary>
            <summary xml:lang="zh-CN">
            添加Cookies
            </summary>
            <param name="cookies">Cookies的键值对 (Cookie's key-value pairs)</param>
            <param name="domain">作用域(<see cref="P:System.Net.Cookie.Domain"/>)</param>
            <param name="path">作用路径(<see cref="P:System.Net.Cookie.Path"/>)</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.AddCookie(System.String,System.String,System.String,System.String)">
            <summary>
            Add one cookie to downloader
            </summary>
            <summary xml:lang="zh-CN">
            添加Cookie
            </summary>
            <param name="name">名称(<see cref="P:System.Net.Cookie.Name"/>)</param>
            <param name="value">值(<see cref="P:System.Net.Cookie.Value"/>)</param>
            <param name="domain">作用域(<see cref="P:System.Net.Cookie.Domain"/>)</param>
            <param name="path">作用路径(<see cref="P:System.Net.Cookie.Path"/>)</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.GetCookies(System.Uri)">
            <summary>
            Gets a <see cref="T:System.Net.CookieCollection"/> that contains the <see cref="T:System.Net.Cookie"/> instances that are associated with a specific <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">The URI of the System.Net.Cookie instances desired.</param>
            <returns>A <see cref="T:System.Net.CookieCollection"/> that contains the <see cref="T:System.Net.Cookie"/> instances that are associated with a specific <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.AddCookie(System.Net.Cookie)">
            <summary>
            Add one cookie to downloader
            </summary>
            <summary xml:lang="zh-CN">
            设置 Cookie
            </summary>
            <param name="cookie">Cookie</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.AddCookieToDownloadClient(System.Net.Cookie)">
            <summary>
            Override this method to add cookies to Downloaders (HttpClient, WebDriver etc.) 
            </summary>
            <summary xml:lang="zh-CN">
            下载器在第一次使用时, 会把CookieContainer中的Cookie加载到下载工具中(HttpClient, WebDriver), 
            但当下载器已经在运行时, 更新Cookie则需要使用此方法把新的Cookie更新到各个下载工具中
            </summary>
            <param name="cookie">Cookie</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.Download(DotnetSpider.Core.Request,DotnetSpider.Core.ISpider)">
            <summary>
            Download webpage content and build a <see cref="T:DotnetSpider.Core.Page"/> instance.
            </summary>
            <summary xml:lang="zh-CN">
            下载链接内容
            </summary>
            <param name="request">链接请求 <see cref="T:DotnetSpider.Core.Request"/></param>
            <param name="spider">爬虫接口 <see cref="T:DotnetSpider.Core.ISpider"/></param>
            <returns>下载内容封装好的页面对象 (a <see cref="T:DotnetSpider.Core.Page"/> instance that contains requested page infomations, like Html source, headers, etc.)</returns>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.AddAfterDownloadCompleteHandler(DotnetSpider.Core.Downloader.IAfterDownloadCompleteHandler)">
            <summary>
            Add a <see cref="T:DotnetSpider.Core.Downloader.IAfterDownloadCompleteHandler"/> to <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/>
            </summary>
            <summary xml:lang="zh-CN">
            添加处理器
            </summary>
            <param name="handler"><see cref="T:DotnetSpider.Core.Downloader.IAfterDownloadCompleteHandler"/></param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.AddBeforeDownloadHandler(DotnetSpider.Core.Downloader.IBeforeDownloadHandler)">
            <summary>
            Add a <see cref="T:DotnetSpider.Core.Downloader.IBeforeDownloadHandler"/> to <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/>
            </summary>
            <summary xml:lang="zh-CN">
            添加处理器
            </summary>
            <param name="handler"><see cref="T:DotnetSpider.Core.Downloader.IBeforeDownloadHandler"/></param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.Clone">
            <summary>
            Clone a Downloader throuth <see cref="M:System.Object.MemberwiseClone"/>, override if you need a deep clone or others. 
            </summary>
            <summary xml:lang="zh-CN">
            克隆一个下载器, 多线程时, 每个线程使用一个下载器, 这样如WebDriver下载器则不再需要管理WebDriver对象的个数了, 每个下载器就只包含一个WebDriver。
            </summary>
            <returns>下载器</returns>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.DowloadContent(DotnetSpider.Core.Request,DotnetSpider.Core.ISpider)">
            <summary>
            Override this method to download content.
            </summary>
            <summary xml:lang="zh-CN">
            下载工作的具体实现
            </summary>
            <param name="request">请求信息 <see cref="T:DotnetSpider.Core.Request"/></param>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
            <returns>页面数据 <see cref="T:DotnetSpider.Core.Page"/></returns>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BaseDownloader.TryDetectContentType(DotnetSpider.Core.Page,DotnetSpider.Core.ISpider)">
            <summary>
            Try to detect Content type
            </summary>
            <param name="page"></param>
            <param name="spider"></param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.BeforeDownloadHandler">
            <summary>
            Pre-process before downloading, you can edit request here like PostBody etc.
            </summary>
            <summary xml:lang="zh-CN">
            下载工作的预处理, 可以在执行下载前替换关键信息: 如修正PostBody
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.BeforeDownloadHandler.Handle(DotnetSpider.Core.Request@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Pre-process before downloading
            </summary>
            <summary xml:lang="zh-CN">
            下载工作的预处理
            </summary>
            <param name="request">请求信息 <see cref="T:DotnetSpider.Core.Request"/></param>
            <param name="downloader">下载器 <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/></param>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.CookieInjector">
            <summary>
            The abstraction of <see cref="T:DotnetSpider.Core.Downloader.ICookieInjector"/>.
            In multi-thread situations, there will be multi-trying of injecting in short interval, need to set <see cref="P:DotnetSpider.Core.Downloader.CookieInjector.FrequencyLimitation"/> to avoid it.
            </summary>
            <summary xml:lang="zh-CN">
            Cookie 注入器的抽象, 因多线程的原因, 导致某些极限情况会在极短时间内多次尝试注入, 需要设置 FrequencyLimitation来规避
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Downloader.CookieInjector.Logger">
            <summary>
            Log interface
            </summary>
            <summary xml:lang="zh-CN">
            日志接口
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Downloader.CookieInjector.FrequencyLimitation">
            <summary>
            Mininum interval between injections (in second).
            </summary>
            <summary>
            重复调用的频率限制(秒)
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.CookieInjector.Inject(DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider,System.Boolean)">
            <summary>
            Inject cookie here.
            </summary>
            <summary xml:lang="zh-CN">
            执行注入Cookie的操作
            </summary>
            <param name="downloader">下载器 <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/></param>
            <param name="spider">需要注入Cookie的爬虫 <see cref="T:DotnetSpider.Core.ISpider"/> that need to be injected.</param>
            <param name="pauseBeforeInject">注入Cookie前是否先暂停爬虫 Whether to pause <see cref="T:DotnetSpider.Core.ISpider"/> before injection.</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.CookieInjector.GetCookies(DotnetSpider.Core.ISpider)">
            <summary>
            Obtain new Cookies.
            </summary>
            <summary xml:lang="zh-CN">
            取得新的Cookies
            </summary>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
            <returns>Cookies <see cref="T:System.Net.CookieCollection"/></returns>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.CookieInjector.CheckFrequency">
            <summary>
            Check injection frenquency.
            </summary>
            <summary xml:lang="zh-CN">
            60 秒内重复注入
            </summary>
            <returns>return true if reach the limit.</returns>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.DownloadException">
            <summary>
            Exception that <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/> throws.
            </summary>
            <summary xml:lang="zh-CN">
            下载器抛出的异常
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.DownloadException.#ctor">
            <summary>
            Constructor
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.DownloadException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
            <param name="message">异常信息 Error message</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.FileCookieInject">
            <summary>
            Read cookie from specified file and inject to <see cref="T:DotnetSpider.Core.ISpider"/>
            It support two formats as followings:
            baidu.com
            a=b;c=e
            
            baidu.com
            /
            a=b;c=e
            </summary>
            <summary xml:lang="zh-CN">
            从指定文件中读取Cookie注入到爬虫中, 文件格式支持两种：
            baidu.com
            a=b;c=e
            
            baidu.com
            /
            a=b;c=e
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.FileCookieInject.#ctor">
            <summary>
            Constructor
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.FileCookieInject.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
            <param name="path">Cookie文件路径 Cookie File path</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.FileCookieInject.GetCookies(DotnetSpider.Core.ISpider)">
            <summary>
            Obtain new cookies
            </summary>
            <summary xml:lang="zh-CN">
            取得新的Cookies
            </summary>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
            <returns>Cookies</returns>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.FileDownloader">
            <summary>
            Download from local filesystem.
            </summary>
            <summary xml:lang="zh-CN">
            从本地文件中下载内容
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.FileDownloader.DowloadContent(DotnetSpider.Core.Request,DotnetSpider.Core.ISpider)">
            <summary>
            Download from local filesystem.
            </summary>
            <summary xml:lang="zh-CN">
            从本地文件中下载内容
            </summary>
            <param name="request">请求信息 <see cref="T:DotnetSpider.Core.Request"/></param>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
            <returns>页面数据 <see cref="T:DotnetSpider.Core.Page"/></returns>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.HttpClientDownloader">
            <summary>
            Downloader using <see cref="T:System.Net.Http.HttpClient"/>
            </summary>
            <summary xml:lang="zh-CN">
            纯HTTP下载器
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Downloader.HttpClientDownloader.ExcludeMediaTypes">
            <summary>
            What mediatype should not be treated as file to download.
            </summary>
            <summary xml:lang="zh-CN">
            定义哪些类型的内容不需要当成文件下载
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Downloader.HttpClientDownloader.HttpClientPool">
            <summary>
            A <see cref="T:System.Net.Http.HttpClient"/> pool
            </summary>
            <summary xml:lang="zh-CN">
            HttpClient池
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.HttpClientDownloader.#ctor">
            <summary>
            Constructor
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.HttpClientDownloader.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <summary xml:lang="zh-CN">
            构造方法
            </summary>
            <param name="timeout">下载超时时间 Download timeout.</param>
            <param name="decodeHtml">下载的内容是否需要HTML解码 Whether <see cref="P:DotnetSpider.Core.Page.Content"/> need to Html Decode.</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.HttpClientDownloader.AddCookieToDownloadClient(System.Net.Cookie)">
            <summary>
            Add cookies to download clients: HttpClient, WebDriver etc...
            </summary>
            <summary xml:lang="zh-CN">
            设置 Cookie 到下载客户端: HttpClient, WebDriver etc...
            </summary>
            <param name="cookie">Cookie</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.HttpClientDownloader.DowloadContent(DotnetSpider.Core.Request,DotnetSpider.Core.ISpider)">
            <summary>
            Http download implemention
            </summary>
            <summary xml:lang="zh-CN">
            HTTP下载的实现
            </summary>
            <param name="request">请求信息 <see cref="T:DotnetSpider.Core.Request"/></param>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
            <returns>页面数据 <see cref="T:DotnetSpider.Core.Page"/></returns>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.HttpClientPool">
            <summary>
            Httpclient pool impletion for <see cref="T:DotnetSpider.Core.Downloader.IHttpClientPool"/>
            </summary>
            <summary xml:lang="zh-CN">
            HttpClient池
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.HttpClientPool.GetHttpClient(DotnetSpider.Core.ISpider,DotnetSpider.Core.Downloader.IDownloader,System.Net.CookieContainer,System.Nullable{System.Int32},DotnetSpider.Core.Downloader.ICookieInjector)">
            <summary>
            Get a <see cref="T:DotnetSpider.Core.Downloader.HttpClientElement"/> from <see cref="T:DotnetSpider.Core.Downloader.IHttpClientPool"/>.
            Return same <see cref="T:DotnetSpider.Core.Downloader.HttpClientElement"/> instance when <paramref name="hashCode"/> is same.
            This can ensure some pages have same CookieContainer.
            </summary>
            <summary xml:lang="zh-CN">
            通过不同的Hash分组, 返回对应的HttpClient
            设计初衷: 某些网站会对COOKIE某部分做承上启下的检测, 因此必须保证: www.a.com/keyword=xxxx&amp;page=1 www.a.com/keyword=xxxx&amp;page=2 在同一个HttpClient里访问
            </summary>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
            <param name="downloader">下载器 <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/></param>
            <param name="cookieContainer">Cookie <see cref="T:System.Net.CookieContainer"/></param>
            <param name="hashCode">分组的哈希 Hashcode to identify different group.</param>
            <param name="cookieInjector">Cookie注入器 <see cref="T:DotnetSpider.Core.Downloader.ICookieInjector"/></param>
            <returns>HttpClientItem</returns>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.HttpClientPool.AddCookie(System.Net.Cookie)">
            <summary>
            Add cookie to <see cref="T:DotnetSpider.Core.Downloader.IHttpClientPool"/>
            </summary>
            <summary xml:lang="zh-CN">
            设置 Cookie
            </summary>
            <param name="cookie">Cookie</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.IAfterDownloadCompleteHandler">
            <summary>
            Post-process after downloading.
            </summary>
            <summary xml:lang="zh-CN">
            下载器完成下载工作后运行的处理工作
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IAfterDownloadCompleteHandler.Handle(DotnetSpider.Core.Page@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            You can process page content, check downdload status(anti-spider) and update cookies etc. here.
            </summary>
            <summary xml:lang="zh-CN">
            处理页面数据、检测下载情况(是否被反爬)、更新Cookie等操作
            </summary>
            <param name="page">页面数据 <see cref="T:DotnetSpider.Core.Page"/></param>
            <param name="downloader">下载器 <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/></param>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.IBeforeDownloadHandler">
            <summary>
            Pre-process before downloading, you can edit request here like PostBody etc.
            </summary>
            <summary xml:lang="zh-CN">
            下载工作的预处理, 可以在执行下载前替换关键信息: 如修正PostBody
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IBeforeDownloadHandler.Handle(DotnetSpider.Core.Request@,DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider)">
            <summary>
            Pre-process before downloading
            </summary>
            <summary xml:lang="zh-CN">
            下载工作的预处理
            </summary>
            <param name="request">请求信息 <see cref="T:DotnetSpider.Core.Request"/></param>
            <param name="downloader">下载器 <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/></param>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.ICookieInjector">
            <summary>
            Cookie注入器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.ICookieInjector.Inject(DotnetSpider.Core.Downloader.IDownloader,DotnetSpider.Core.ISpider,System.Boolean)">
            <summary>
            执行注入Cookie的操作
            </summary>
            <param name="downloader">下载器</param>
            <param name="spider">需要注入Cookie的爬虫</param>
            <param name="pauseBeforeInject">注入Cookie前是否先暂停爬虫</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.IDownloader">
            <summary>
            Downloader interface
            </summary>
            <summary xml:lang="zh-CN">
            下载器接口
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IDownloader.Download(DotnetSpider.Core.Request,DotnetSpider.Core.ISpider)">
            <summary>
            Download content from a web url
            </summary>
            <summary xml:lang="zh-CN">
            下载链接内容
            </summary>
            <param name="request">链接请求 <see cref="T:DotnetSpider.Core.Request"/></param>
            <param name="spider">爬虫接口 <see cref="T:DotnetSpider.Core.ISpider"/></param>
            <returns>下载内容封装好的页面对象 <see cref="T:DotnetSpider.Core.Page"/></returns>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IDownloader.AddAfterDownloadCompleteHandler(DotnetSpider.Core.Downloader.IAfterDownloadCompleteHandler)">
            <summary>
            Add handlers for post-processing.
            </summary>
            <summary xml:lang="zh-CN">
            添加下载完成后的后续处理操作
            </summary>
            <param name="handler"><see cref="T:DotnetSpider.Core.Downloader.IAfterDownloadCompleteHandler"/></param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IDownloader.AddBeforeDownloadHandler(DotnetSpider.Core.Downloader.IBeforeDownloadHandler)">
            <summary>
            Add handlers for pre-processing.
            </summary>
            <summary xml:lang="zh-CN">
            添加下载操作前的处理操作
            </summary>
            <param name="handler"><see cref="T:DotnetSpider.Core.Downloader.IBeforeDownloadHandler"/></param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IDownloader.AddCookie(System.Net.Cookie)">
            <summary>
            Add cookies.
            </summary>
            <summary xml:lang="zh-CN">
            设置 Cookie
            </summary>
            <param name="cookie">Cookie <see cref="T:System.Net.Cookie"/></param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IDownloader.AddCookie(System.String,System.String,System.String,System.String)">
            <summary>
            Add cookies.
            </summary>
            <summary xml:lang="zh-CN">
            设置 Cookie
            </summary>
            <param name="name">名称(<see cref="P:System.Net.Cookie.Name"/>)</param>
            <param name="value">值(<see cref="P:System.Net.Cookie.Value"/>)</param>
            <param name="domain">作用域(<see cref="P:System.Net.Cookie.Domain"/>)</param>
            <param name="path">作用路径(<see cref="P:System.Net.Cookie.Path"/>)</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IDownloader.AddCookies(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Add cookies to downloader
            </summary>
            <summary xml:lang="zh-CN">
            添加Cookies
            </summary>
            <param name="cookies">Cookies的键值对 (Cookie's key-value pairs)</param>
            <param name="domain">作用域(<see cref="P:System.Net.Cookie.Domain"/>)</param>
            <param name="path">作用路径(<see cref="P:System.Net.Cookie.Path"/>)</param>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IDownloader.AddCookies(System.String,System.String,System.String)">
            <summary>
            Add cookies to downloader
            </summary>
            <summary xml:lang="zh-CN">
            设置 Cookies
            </summary>
            <param name="cookiesStr">Cookies的键值对字符串, 如: a1=b;a2=c;(Cookie's key-value pairs string, a1=b;a2=c; etc.)</param>
            <param name="domain">作用域(<see cref="P:System.Net.Cookie.Domain"/>)</param>
            <param name="path">作用路径(<see cref="P:System.Net.Cookie.Path"/>)</param>
        </member>
        <member name="P:DotnetSpider.Core.Downloader.IDownloader.CookieInjector">
            <summary>
            Cookie Injector.
            </summary>
            <summary xml:lang="zh-CN">
            Cookie 注入器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IDownloader.Clone">
            <summary>
            Clone a Downloader throuth <see cref="M:System.Object.MemberwiseClone"/>, override if you need a deep clone or others. 
            </summary>
            <summary xml:lang="zh-CN">
            克隆一个下载器, 多线程时, 每个线程使用一个下载器对象, 这样如WebDriver下载器则不再需要管理WebDriver对象的个数了, 每个下载器就只包含一个WebDriver
            </summary>
            <returns>下载器</returns>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IDownloader.GetCookies(System.Uri)">
            <summary>
            Gets a <see cref="T:System.Net.CookieCollection"/> that contains the <see cref="T:System.Net.Cookie"/> instances that are associated with a specific <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">The URI of the System.Net.Cookie instances desired.</param>
            <returns>A System.Net.CookieCollection that contains the System.Net.Cookie instances that are associated with a specific URI.</returns>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.HttpClientElement">
            <summary>
            HttpClient Infomations
            </summary>
            <summary xml:lang="zh-CN">
            HttpClient信息封装
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Downloader.HttpClientElement.Client">
            <summary>
            <see cref="T:System.Net.Http.HttpClient"/>
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Downloader.HttpClientElement.Handler">
            <summary>
            <see cref="T:System.Net.Http.HttpClientHandler"/>
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Downloader.HttpClientElement.LastUsedTime">
            <summary>
            The last time this is used.
            </summary>
            <summary xml:lang="zh-CN">
            上一次使用的时间
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.IHttpClientPool">
            <summary>
            Httpclient pool impletion for <see cref="T:DotnetSpider.Core.Downloader.IHttpClientPool"/>
            </summary>
            <summary xml:lang="zh-CN">
            HttpClient池
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IHttpClientPool.GetHttpClient(DotnetSpider.Core.ISpider,DotnetSpider.Core.Downloader.IDownloader,System.Net.CookieContainer,System.Nullable{System.Int32},DotnetSpider.Core.Downloader.ICookieInjector)">
            <summary>
            Get a <see cref="T:DotnetSpider.Core.Downloader.HttpClientElement"/> from <see cref="T:DotnetSpider.Core.Downloader.IHttpClientPool"/>.
            Return same <see cref="T:DotnetSpider.Core.Downloader.HttpClientElement"/> instance when <paramref name="hashCode"/> is same.
            This can ensure some pages have same CookieContainer.
            </summary>
            <summary xml:lang="zh-CN">
            通过不同的Hash分组, 返回对应的HttpClient
            设计初衷: 某些网站会对COOKIE某部分做承上启下的检测, 因此必须保证: www.a.com/keyword=xxxx&amp;page=1 www.a.com/keyword=xxxx&amp;page=2 在同一个HttpClient里访问
            </summary>
            <param name="spider">爬虫 <see cref="T:DotnetSpider.Core.ISpider"/></param>
            <param name="downloader">下载器 <see cref="T:DotnetSpider.Core.Downloader.IDownloader"/></param>
            <param name="cookieContainer">Cookie <see cref="T:System.Net.CookieContainer"/></param>
            <param name="hashCode">分组的哈希 Hashcode to identify different group.</param>
            <param name="cookieInjector">Cookie注入器 <see cref="T:DotnetSpider.Core.Downloader.ICookieInjector"/></param>
            <returns>HttpClientItem</returns>
        </member>
        <member name="M:DotnetSpider.Core.Downloader.IHttpClientPool.AddCookie(System.Net.Cookie)">
            <summary>
            Add cookie to <see cref="T:DotnetSpider.Core.Downloader.IHttpClientPool"/>
            </summary>
            <summary xml:lang="zh-CN">
            更新池中所有HttpClient对象的 Cookie
            </summary>
            <param name="cookie">Cookie</param>
        </member>
        <member name="T:DotnetSpider.Core.Downloader.LoginHandler">
            <summary>
            implemention for <see cref="T:DotnetSpider.Core.Downloader.CookieInjector"/> that handles login cookies.
            </summary>
            <summary xml:lang="zh-CN">
            登录的实现接口
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Env">
            <summary>
            爬虫配置
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Env.Version">
            <summary>
            TODO: 原则上此版本号与Nuget包版本号同步, 但是不知道有什么好的自动化更新方法
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Env.RedisConnectStringKey">
            <summary>
            从配置文件中读取默认Redis连接字符串的关键字
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Env.EnterpiseService">
            <summary>
            开启企业服务(HTTP), 默认打开, 测试的时候开关
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Env.IdColumns">
            <summary>
            定义数据主键的名称
            使用实体定义爬虫解析时, 自动插入数据必须使用自增主键, 在自动构造插入数据的SQL语句时会忽略主键
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Env.CDateColumn">
            <summary>
            定义数据采集的时间
            使用实体定义爬虫解析时, 会自动添加CDate数据列
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.SystemConnectionStringSettings">
            <summary>
            爬虫系统使用的数据库连接配置
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.DataConnectionStringSettings">
            <summary>
            数据管道的数据库连接配置
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.HostName">
            <summary>
            当前操作系统的HostName
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.Ip">
            <summary>
            当前操作系统的IP地址
            IP地址应考虑的问题: 内网IP+ ADSL拨号时应该能准确取到内网IP地址
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.NodeId">
            <summary>
            当前环境的节点编号
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.RedisConnectString">
            <summary>
            从配置文件中读取的Redis连接字符串
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EmailHost">
            <summary>
            从配置文件中读取的邮件服务器地址
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EmailPort">
            <summary>
            从配置文件中读取的邮件服务器端口
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EmailAccount">
            <summary>
            从配置文件中读取的邮件服务帐号
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EmailPassword">
            <summary>
            从配置文件中读取的邮件服务密码
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EmailDisplayName">
            <summary>
            从配置文件中读取的邮件服务发送时显示的名称
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.GlobalDirectory">
            <summary>
            框架使用的全局共享目录, 不是必需要的配置, 某些情况下还会没有权限(把程序部署到租凭的IIS空间中)
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.DefaultGlobalAppConfigPath">
            <summary>
            全局配置文件的路径, 当在一台机器配置多个程序, 数据库的帐号密码更新时只需要更新全局配置文件就可以保证所有程序正常运行
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.BaseDirectory">
            <summary>
            程序运行的工作目录
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.PathSeperator">
            <summary>
            路径分隔符, 因操作系统不同而不同
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EnterpiseServiceLog">
            <summary>
            是否启用企业服务日志, 默认值是判断配置文件中是否配置了EnterpiseServiceUrl
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EnterpiseServiceUrl">
            <summary>
            从配置文件中读取的企业服务地址
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EnterpiseServiceLogUrl">
            <summary>
            企业服务HTTP日志的地址
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EnterpiseServicePipelineUrl">
            <summary>
            企业服务HTTP数据管道的地址
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EnterpiseServiceStatusApiUrl">
            <summary>
            企业服务HTTP爬虫状态的上传地址
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EnterpiseServiceTaskApiUrl">
            <summary>
            向企业服务添加运行记录的地址
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.EnterpiseServiceToken">
            <summary>
            访问企业服务时使用的凭证
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.SystemConnectionString">
            <summary>
            爬虫系统使用的数据库连接字符串
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.DataConnectionString">
            <summary>
            数据管道默认使用的数据库连接字符串
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Env.ProcessorFilterDefaultRequest">
            <summary>
            配置PageProcessor是否对深度为1的链接进行正则筛选
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.SqlEncryptCode">
            <summary>
            使用HTTP数据管道时, 对数据进行对称加密的密钥
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.IdentityMaxLength">
            <summary>
            任务唯一标识的最大长度限制
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Env.ConfigurationFilePath">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Env.IsWindows">
            <summary>
            当前操作系统是否Windows
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Env.LoadConfiguration(System.String)">
            <summary>
            加载配置文件
            </summary>
            <param name="path">配置文件路径</param>
        </member>
        <member name="M:DotnetSpider.Core.Env.Reload">
            <summary>
            重新加载配置文件
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.HttpExecuteRecord">
            <summary>
            通过Http向企业服务上报运行状态
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.HttpExecuteRecord.Add(System.String,System.String,System.String)">
            <summary>
            添加运行记录
            </summary>
            <param name="taskId">任务编号</param>
            <param name="name">任务名称</param>
            <param name="identity">任务标识</param>
            <returns>是否上报成功</returns>
        </member>
        <member name="M:DotnetSpider.Core.HttpExecuteRecord.Remove(System.String,System.String,System.String)">
            <summary>
            删除运行记录
            </summary>
            <param name="taskId">任务编号</param>
            <param name="name">任务名称</param>
            <param name="identity">任务标识</param>
        </member>
        <member name="T:DotnetSpider.Core.IControllable">
            <summary>
            任务控制接口
            实现任务的暂停、继续、退出
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.IControllable.Pause(System.Action)">
            <summary>
            暂停任务
            暂停一个不在运行的任务应该提示警告
            </summary>
            <param name="action">暂停任务成功后回调的方法</param>
        </member>
        <member name="M:DotnetSpider.Core.IControllable.Contiune">
            <summary>
            继续任务
            继续一个不在暂停的任务应该提示警告
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.IControllable.Exit(System.Action)">
            <summary>
            退出任务
            </summary>
            <param name="action">退出任务成功后的回调方法</param>
        </member>
        <member name="T:DotnetSpider.Core.IExecuteRecord">
            <summary>
            运行记录接口
            程序在运行前应该添加相应的运行记录, 任务结束后删除对应的记录, 企业服务依赖运行记录数据显示正在运行的任务
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.IExecuteRecord.Add(System.String,System.String,System.String)">
            <summary>
            添加运行记录
            </summary>
            <param name="taskId">任务编号</param>
            <param name="name">任务名称</param>
            <param name="identity">任务标识</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:DotnetSpider.Core.IExecuteRecord.Remove(System.String,System.String,System.String)">
            <summary>
            删除运行记录
            </summary>
            <param name="taskId">任务编号</param>
            <param name="name">任务名称</param>
            <param name="identity">任务标识</param>
        </member>
        <member name="T:DotnetSpider.Core.IIdentity">
            <summary>
            唯一标识接口
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.IIdentity.Identity">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.INamed">
            <summary>
            名称接口定义
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.INamed.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Named">
            <summary>
            名称的抽象
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Named.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.Adsl">
            <summary>
            Adsl 拨号类
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Adsl.Connect(System.String)">
            <summary>
            拨号
            </summary>
            <param name="adslName">ADSL名称, 默认为: 宽带连接</param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Adsl.Disconnect">
            <summary>
            断开当前ADSL拨号
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.AtomicInteger">
            <summary>
            线程安全的计数器
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.AtomicInteger.Value">
            <summary>
            获取当前值
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AtomicInteger.#ctor">
            <summary>
            构造方法, 起始值为 0
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AtomicInteger.#ctor(System.Int32)">
            <summary>
            使用指定值作为初始值创建新实例
            </summary>
            <param name="initValue">计算开始值</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AtomicInteger.Inc">
            <summary>
            递增并返回最新值
            </summary>
            <returns>递增后的值</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AtomicInteger.Dec">
            <summary>
            递减并返回最新值
            </summary>
            <returns>递减后的值</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AtomicInteger.CompareAndSet(System.Int32,System.Int32)">
            <summary>
            比较并设置新值
            </summary>
            <param name="expectedValue">期望的值</param>
            <param name="newValue">新值</param>
            <returns>更新成功时返回true</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AtomicInteger.Set(System.Int32)">
            <summary>
            强制更新为新值
            </summary>
            <param name="newValue">新的值</param>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.AutomicLong">
            <summary>
            线程安全的计数器
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.AutomicLong.Value">
            <summary>
            获取当前值
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AutomicLong.#ctor">
            <summary>
            构造方法, 起始值为 0
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AutomicLong.#ctor(System.Int64)">
            <summary>
            使用指定值作为初始值创建新实例
            </summary>
            <param name="initValue">计算开始值</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AutomicLong.Inc">
            <summary>
            递增并返回最新值
            </summary>
            <returns>递增后的值</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AutomicLong.Dec">
            <summary>
            递减并返回最新值
            </summary>
            <returns>递减后的值</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AutomicLong.CompareAndSet(System.Int64,System.Int64)">
            <summary>
            比较并设置新值
            </summary>
            <param name="expectedValue">期望的值</param>
            <param name="newValue">新值</param>
            <returns>更新成功时返回true</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.AutomicLong.Set(System.Int64)">
            <summary>
            强制更新为新值
            </summary>
            <param name="newValue">新的值</param>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.BlockingQueue`1">
            <summary>
            线程安全的队列
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.#ctor(System.Int32)">
            <summary>
            Create instance of Queue with Bounded number of elements.
            After that many elements are used, another Enqueue
            operation will "block" or wait until a Consumer calls
            Dequeue to free a slot.  Likewise, if the queue
            is empty, a call to Dequeue will block until
            another thread calls Enqueue.
            </summary>
            <param name="size"></param>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.BlockingQueue`1.Values">
            <summary>
            Gets the object values currently in the queue.
            If queue is empty, this will return a zero length array.
            The returned array length can be 0 to Size.
            This method does not modify the queue,
            but returns a shallow copy
            of the queue buffer containing the objects
            contained in the queue.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the queue.
            If queue is full, this method will
            block until another thread calls one
            of the Dequeue methods.  This method will wait
            "Timeout.Infinite" until queue has a free slot.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Adds an object to the end of the queue.
            If queue is full, this method will
            block until another thread calls one
            of the Dequeue methods or millisecondsTimeout
            expires.  If timeout, method will throw QueueTimeoutException.
            </summary>
            <param name="value"></param>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.TryEnqueue(`0)">
            <summary>
            Non-blocking version of Enqueue().
            If Enqueue is successfull, this will
            return true; otherwise false if queue is full.
            </summary>
            <param name="value"></param>
            <returns>true if successfull,
            otherwise false.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.Dequeue">
            <summary>
            Removes and returns the object
            at the beginning of the Queue.
            If queue is empty, method will block until
            another thread calls one of
            the Enqueue methods. This method will wait
            "Timeout.Infinite" until another
            thread Enqueues and object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.Dequeue(System.Int32)">
            <summary>
            Removes and returns the object
            at the beginning of the Queue.
            If queue is empty, method will block until
            another thread calls one of
            the Enqueue methods or millisecondsTimeout expires.
            If timeout, method will throw QueueTimeoutException.
            </summary>
            <returns>The object that is removed from
            the beginning of the Queue.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.TryDequeue(`0@)">
            <summary>
            Non-blocking version of Dequeue.
            Will return false if queue is empty and set
            value to null, otherwise will return true
            and set value to the dequeued object.
            </summary>
            <param name="value">The object that is removed from
                the beginning of the Queue or null if empty.</param>
            <returns>true if successfull, otherwise false.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.Peek">
            <summary>
            Returns the object at the beginning
            of the queue without removing it.
            </summary>
            <returns>The object at the beginning
            of the queue.</returns>
            <remarks>
            This method is similar to the Dequeue method,
            but Peek does not modify the queue. 
            A null reference can be added to the Queue as a value. 
            To distinguish between a null value and the end of the queue,
            check the Count property or
            catch the InvalidOperationException,
            which is thrown when the Queue is empty.
            </remarks>
            <exception>
                           The queue is empty.
                <cref>InvalidOpertionException</cref>
            </exception>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.TryPeek(`0@)">
            <summary>
            Returns the object at the beginning
            of the Queue without removing it.
            Similar to the Peek method, however this method
            will not throw exception if
            queue is empty, but instead will return false.
            </summary>
            <param name="value">The object at the beginning
                     of the Queue or null if empty.</param>
            <returns>The object at the beginning of the Queue.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.Clear">
            <summary>
            Removes all objects from the Queue.
            </summary>
            <remarks>
            Count is set to zero. Size does not change.
            </remarks>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.BlockingQueue`1.IsSynchronized">
            <inheritdoc />
            <summary>
            Gets a value indicating whether access
            to the Queue is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.BlockingQueue`1.Size">
            <summary>
            Returns the max elements allowed
            in the queue before blocking Enqueue
            operations.  This is the size set in the constructor.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.BlockingQueue`1.Count">
            <summary>
            Gets the number of elements contained in the Queue.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the Queue elements to an existing one-dimensional Array,
            starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination
            of the elements copied from Queue.
            The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index
                in array at which copying begins.</param>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.BlockingQueue`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize
            access to the Queue.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BlockingQueue`1.GetEnumerator">
            <summary>
            GetEnumerator not implemented. You can't enumerate
            the active queue as you would an array as it is dynamic
            with active gets and puts. You could
            if you locked it first and unlocked after
            enumeration, but that does not work well for GetEnumerator.
            The recommended method is to Get Values
            and enumerate the returned array copy.
            That way the queue is locked for
            only a short time and a copy returned
            so that can be safely enumerated using
            the array's enumerator. You could also
            create a custom enumerator that would
            dequeue the objects until empty queue,
            but that is a custom need. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.QueueTimeoutException">
            <summary>
            队列出队或者入队超时异常
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.QueueTimeoutException.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.BloomFilter">
            <summary>
            BloomFilter
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.BloomFilter.DigestFunction">
            <summary>
            The digest method is reused between instances
            </summary>
            <remarks>MD5 gives good enough accuracy in most circumstances. Change to SHA1 if it's needed</remarks>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
            Constructs an empty Bloom filter. The total length of the Bloom filter will be
            c*n.
            </summary>
            <param name="c">is the number of bits used per element.</param>
            <param name="n">is the expected number of elements the filter will contain.</param>
            <param name="k">is the number of hash functions used.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an empty Bloom filter. The optimal number of hash functions (k) is estimated from the total size of the Bloom
            and the number of expected elements.
            </summary>
            <param name="bitSetSize">defines how many bits should be used in total for the filter.</param>
            <param name="expectedNumberOElements">defines the maximum number of elements the filter is expected to contain.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs an empty Bloom filter with a given false positive probability. The number of bits per
            element and the number of hash functions is estimated
            to match the false positive probability.
            </summary>
            <param name="falsePositiveProbability">is the desired false positive probability.</param>
            <param name="expectedNumberOfElements">is the expected number of elements in the Bloom filter.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.BitArray)">
            <summary>
            Construct a new Bloom filter based on existing Bloom filter data.
            </summary>
            <param name="bitSetSize">defines how many bits should be used for the filter.</param>
            <param name="expectedNumberOfFilterElements">defines the maximum number of elements the filter is expected to contain.</param>
            <param name="actualNumberOfFilterElements">specifies how many elements have been inserted into the <code>filterData</code> BitArray.</param>
            <param name="filterData">a BitArray representing an existing Bloom filter.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.CreateHash(System.String,System.Text.Encoding)">
            <summary>
            Generates a digest based on the contents of a string.
            </summary>
            <param name="val">specifies the input data.</param>
            <param name="charset">specifies the encoding of the input data.</param>
            <returns>digest as long.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.CreateHash(System.String)">
            <summary>
            Generates a digest based on the contents of a string.
            </summary>
            <param name="val">specifies the input data. The encoding is expected to be UTF-8.</param>
            <returns>digest as long.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.CreateHash(System.Byte[])">
            <summary>
            Generates a digest based on the contents of an array of bytes.
            </summary>
            <param name="data">specifies input data.</param>
            <returns>digest as long.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.CreateHashes(System.Byte[],System.Int32)">
            <summary>
            Generates digests based on the contents of an array of bytes and splits the result into 4-byte int's and store them in an array. The
            digest function is called until the required number of int's are produced. For each call to digest a salt
            is prepended to the data. The salt is increased by 1 for each call.
            </summary>
            <param name="data">specifies input data</param>
            <param name="hashes">number of hashes/int's to produce</param>
            <returns>array of int-sized hashes</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.Equals(System.Object)">
            <summary>
            Compares the contents of two instances to see if they are equal.
            </summary>
            <param name="obj">is the object to compare to.</param>
            <returns>True if the contents of the objects are equal.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.GetHashCode">
            <summary>
            Calculates a hash code for this class.
            <remarks>performance concerns : note that we read all the bits of bitset to compute the hash</remarks>
            <returns>hash code representing the contents of an instance of this class.</returns>
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.ExpectedFalsePositiveProbability">
            <summary>
            Calculates the expected probability of false positives based on
            the number of expected filter elements and the size of the Bloom filter.
            <br /><br />
            The value returned by this method is the <i>expected</i> rate of false
            positives, assuming the number of inserted elements equals the number of
            expected elements. If the number of elements in the Bloom filter is less
            than the expected value, the true probability of false positives will be lower.
            </summary>
            <returns>expected probability of false positives.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.GetFalsePositiveProbability(System.Double)">
            <summary>
            Calculate the probability of a false positive given the specified
            number of inserted elements.
            </summary>
            <param name="numberOfElements">number of inserted elements.</param>
            <returns>probability of a false positive.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.GetFalsePositiveProbability">
            <summary>
            Get the current probability of a false positive. The probability is calculated from
            the size of the Bloom filter and the current number of elements added to it.
            </summary>
            <returns>probability of false positives.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.GetK">
            <summary>
            Returns the value chosen for K.<br />
            <br />
            K is the optimal number of hash functions based on the size
            of the Bloom filter and the expected number of inserted elements.
            </summary>
            <returns>optimal k.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.Clear">
            <summary>
            Sets all bits to false in the Bloom filter.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.Add(System.Object)">
            <summary>
            Adds an object to the Bloom filter. The output from the object's
            ToString() method is used as input to the hash functions.
            </summary>
            <param name="element">is an element to register in the Bloom filter.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.Add(System.Byte[])">
            <summary>
            Adds an array of bytes to the Bloom filter.
            </summary>
            <param name="bytes">array of bytes to add to the Bloom filter.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.AddAll(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds all elements from a Collection to the Bloom filter.
            </summary>
            <param name="c">Collection of elements.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.AddAll(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Adds all elements from a Collection to the Bloom filter.
            </summary>
            <param name="c">Collection of elements.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.Contains(System.Object)">
            <summary>
            Returns true if the element could have been inserted into the Bloom filter.
            Use getFalsePositiveProbability() to calculate the probability of this
            being correct.
            </summary>
            <param name="element">element to check.</param>
            <returns>true if the element could have been inserted into the Bloom filter.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.Contains(System.Byte[])">
            <summary>
            Returns true if the array of bytes could have been inserted into the Bloom filter.
            Use getFalsePositiveProbability() to calculate the probability of this
            being correct.
            </summary>
            <param name="bytes">array of bytes to check.</param>
            <returns>true if the array could have been inserted into the Bloom filter.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.ContainsAll(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Returns true if all the elements of a Collection could have been inserted
            into the Bloom filter. Use getFalsePositiveProbability() to calculate the
            probability of this being correct.
            </summary>
            <param name="c">elements to check.</param>
            <returns>true if all the elements in c could have been inserted into the Bloom filter.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.GetBit(System.Int32)">
            <summary>
            Read a single bit from the Bloom filter.
            </summary>
            <param name="bit">the bit to read.</param>
            <returns>true if the bit is set, false if it is not.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.SetBit(System.Int32,System.Boolean)">
            <summary>
            Set a single bit in the Bloom filter.
            </summary>
            <param name="bit">is the bit to set.</param>
            <param name="value">If true, the bit is set. If false, the bit is cleared.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.GetBitSet">
            <summary>
            Return the bit set used to store the Bloom filter.
            </summary>
            <returns>bit set representing the Bloom filter.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.Size">
            <summary>
            Returns the number of bits in the Bloom filter. Use count() to retrieve
            the number of inserted elements.
            </summary>
            <returns>the size of the bitset used by the Bloom filter.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.Count">
            <summary>
            Returns the number of elements added to the Bloom filter after it
            was constructed or after clear() was called.
            </summary>
            <returns>number of elements added to the Bloom filter.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.GetExpectedNumberOfElements">
            <summary>
            Returns the expected number of elements to be inserted into the filter.
            This value is the same value as the one passed to the constructor.
            </summary>
            <returns>expected number of elements.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.GetExpectedBitsPerElement">
            <summary>
            Get expected number of bits per element when the Bloom filter is full. This value is set by the constructor
            when the Bloom filter is created. See also getBitsPerElement().
            </summary>
            <returns>expected number of bits per element.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.GetBitsPerElement">
            <summary>
            Get actual number of bits per element based on the number of elements that have currently been inserted and the length
            of the Bloom filter. See also getExpectedBitsPerElement().
            </summary>
            <returns>number of bits per element.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.HashBytes(System.Collections.BitArray)">
            <summary>
            Generate a hash value from an array of bits
            </summary>
            <remarks>voir http://blog.roblevine.co.uk for comparison of hash algorithm implementations</remarks>
            <param name="data">array of bits to hash</param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.BloomFilter.Equals(System.Collections.BitArray,System.Collections.BitArray)">
            <summary>
            Check if two arrays of bits are equals
            Returns true if every bit of this first array is equal to the corresponding bit of the second, false otherwise
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.Browser">
            <summary>
            浏览器类型
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Browser.Firefox">
            <summary>
            Firefox
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Browser.Phantomjs">
            <summary>
            Phantomjs
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Browser.Chrome">
            <summary>
            Chrome
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Browser.Edge">
            <summary>
            Edge
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.Cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.Cache.Instance">
            <summary>
            缓存单例对象
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Cache.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">索引</param>
            <param name="data">数据对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Cache.Get(System.String)">
            <summary>
            取缓存数据
            </summary>
            <param name="key">索引</param>
            <returns>数据对象</returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.ConcurrentDictionaryExtensions">
            <summary>
            ConcurrentDictionary 扩展
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ConcurrentDictionaryExtensions.AddOrUpdate``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
            Adds a key/value pair if the key does not already exist, or updates a key/value pair in the ConcurrentDictionary by using the specified function if the key already exists.
            </summary>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="dictionary">ConcurrentDictionary</param>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="value">The value to be added/updated for an absent key</param>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.ConsoleHelper">
            <summary>
            Console的帮助类
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ConsoleHelper.WriteLine(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            打印一行信息
            </summary>
            <param name="message">需要打印的信息</param>
            <param name="color">打印的颜色</param>
            <param name="colorAfter">设置打印完成Console的字体颜色</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ConsoleHelper.WriteLine(System.String,System.Int32,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            打印一行信息
            </summary>
            <param name="message">需要打印的信息</param>
            <param name="blankLineCount">打印空行数</param>
            <param name="color">打印的颜色</param>
            <param name="colorAfter">设置打印完成Console的字体颜色</param>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.ContentType">
            <summary>
            下载的内容类型
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.ContentType.Auto">
            <summary>
            由框架自动检测内容类型
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.ContentType.Html">
            <summary>
            下载的内容为HTML
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.ContentType.Json">
            <summary>
            下载的内容为Json
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.ContentType.File">
            <summary>
            下载的内容为文件
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.CryptoUtil">
            <summary>
            加、解密帮助类
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.CryptoUtil.Md5Encrypt32(System.String)">
            <summary>
            计算32位MD5
            </summary>
            <param name="str">需要计算的字符串</param>
            <returns>32位的MD5值</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.CryptoUtil.Md5Encrypt(System.String)">
            <summary>
            计算8位MD5
            </summary>
            <param name="str">需要计算的字符串</param>
            <returns>8位的MD5值</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.CryptoUtil.DesEncrypt(System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="key">秘钥</param>
            <param name="str">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.Database.Database">
            <summary>
            Database type enum
            </summary>
            <summary xml:lang="zh-CN">
            数据库类型
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Database.Database.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Database.Database.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Database.Database.MongoDb">
            <summary>
            MongoDB
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Database.Database.Cassandra">
            <summary>
            Cassandra
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Database.Database.PostgreSql">
            <summary>
            PostgreSql
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.Database.DatabaseExtensions">
            <summary>
            Database Extentions
            </summary>
            <summary xml:lang="zh-CN">
            数据库扩展
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Database.DatabaseExtensions.CreateDbConnection(System.Configuration.ConnectionStringSettings)">
            <summary>
            Create DbConnection from <see cref="T:System.Configuration.ConnectionStringSettings"/>.
            </summary>
            <summary xml:lang="zh-CN">
            通过配置创建连接对象
            </summary>
            <param name="connectionStringSettings">数据库配置对象 <see cref="T:System.Configuration.ConnectionStringSettings"/></param>
            <returns>连接对象 <see cref="T:System.Data.Common.DbConnection"/></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Database.DatabaseExtensions.CreateDbConnection(DotnetSpider.Core.Infrastructure.Database.Database,System.String)">
            <summary>
            Create <see cref="T:System.Data.Common.DbConnection"/> instance.
            </summary>
            <summary xml:lang="zh-CN">
            创建连接对象
            </summary>
            <param name="source"><see cref="T:DotnetSpider.Core.Infrastructure.Database.Database"/></param>
            <param name="connectString"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Database.DatabaseExtensions.GetConnectionStringSettings(DotnetSpider.Core.Infrastructure.Database.Database,System.String)">
            <summary>
            Create <see cref="T:System.Configuration.ConnectionStringSettings"/> instance.
            </summary>
            <summary xml:lang="zh-CN">
            创建数据库配置对象
            </summary>
            <param name="source">数据库 <see cref="T:DotnetSpider.Core.Infrastructure.Database.Database"/></param>
            <param name="connectString">连接字符串</param>
            <returns>数据库配置对象 <see cref="T:System.Configuration.ConnectionStringSettings"/></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Database.DatabaseExtensions.ToHtml(System.Data.IDbConnection,System.String)">
            <summary>
            Build HTML table from sql query result.
            </summary>
            <summary xml:lang="zh-CN">
            把SQL查询结果拼装成HTML的table
            </summary>
            <param name="conn">连接对象 <see cref="T:System.Data.IDbConnection"/></param>
            <param name="sql">SQL语句 </param>
            <returns>HTML的table, HTML table</returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.Database.DbProviderFactories">
            <summary>
            Database Driver Factory.
            </summary>
            <summary xml:lang="zh-CN">
            数据库驱动工厂
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Database.DbProviderFactories.MySqlProvider">
            <summary>
            MySql provider name
            </summary>
            <summary xml:lang="zh-CN">
            MySql驱动类名
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Database.DbProviderFactories.SqlServerProvider">
            <summary>
            SqlServer provider name
            </summary>
            <summary xml:lang="zh-CN">
            SqlServer驱动类名
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Database.DbProviderFactories.PostgreSqlProvider">
            <summary>
            PostgreSql provider name
            </summary>
            <summary xml:lang="zh-CN">
            PostgreSql
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Database.DbProviderFactories.GetFactory(System.String)">
            <summary>
            Get <see cref="T:System.Data.Common.DbProviderFactory"/> from database driver provider name.
            </summary>
            <summary xml:lang="zh-CN">
            通过驱动类名取得工厂类
            </summary>
            <param name="providerInvariantName">驱动类名</param>
            <returns>Represents a set of methods for creating instances of a provider's implementation of the data source classes.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Database.DbProviderFactories.RegisterFactory(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Register <see cref="T:System.Data.Common.DbProviderFactory"/> to DbProviderFactories Configs.
            </summary>
            <summary xml:lang="zh-CN">
            注册驱动
            </summary>
            <param name="providerInvariantName">驱动类名</param>
            <param name="factory">Represents a set of methods for creating instances of a provider's implementation of the data source classes.</param>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.DataTypeNames">
            <summary>
            数据类型的名称
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.DataTypeNames.Int">
            <summary>
            Int 的类型全称
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.DataTypeNames.Int64">
            <summary>
            Int64 的类型全称
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.DataTypeNames.Double">
            <summary>
            Double 的类型全称
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.DataTypeNames.String">
            <summary>
            String 的类型全称
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.DataTypeNames.Float">
            <summary>
            Float 的类型全称
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.DataTypeNames.DateTime">
            <summary>
            DateTime 的类型全称
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.DataTypeNames.Boolean">
            <summary>
            Boolean 的类型全称
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.DataTypeNames.Decimal">
            <summary>
            Decimal 的类型全称
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.DataTypeNames.TimeUuid">
            <summary>
            Cassandra TimeUuid的类型全称
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.DateTimeUtil">
            <summary>
            时间的帮助类
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.RunIdOfToday">
            <summary>
            当天的RunId: 2017-12-20
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.RunIdOfMonthly">
            <summary>
            当月的RunId: 2017-12-01
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.RunIdOfMonday">
            <summary>
            当周的RunId: 2018-01-01 (it's monday)
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.FirstDayOfTheMonth">
            <summary>
            当前月份的第一天
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.LastDayOfTheMonth">
            <summary>
            当前月份的第一天
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.FirstDayOfLastMonth">
            <summary>
            当前月份的最后一天
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.LastDayOfLastMonth">
            <summary>
            前一月份的最后一天
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.Monday">
            <summary>
            星期一
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.Tuesday">
            <summary>
            星期二
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.Wednesday">
            <summary>
            星期三
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.Thursday">
            <summary>
            星期四
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.Friday">
            <summary>
            星期五
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.Saturday">
            <summary>
            星期六
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.Sunday">
            <summary>
            星期天
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.LastMonday">
            <summary>
            上周的星期一
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.LastTuesday">
            <summary>
            上周的星期二
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.LastWednesday">
            <summary>
            上周的星期三
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.LastThursday">
            <summary>
            上周的星期四
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.LastFriday">
            <summary>
            上周的星期五
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.LastSaturday">
            <summary>
            上周的星期六
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.LastSunday">
            <summary>
            上周的星期天
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.NextMonday">
            <summary>
            下周的星期一
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.NextTuesday">
            <summary>
            下周的星期二
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.NextWednesday">
            <summary>
            下周的星期三
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.NextThursday">
            <summary>
            下周的星期四
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.NextFriday">
            <summary>
            下周的星期五
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.NextSaturday">
            <summary>
            下周的星期六
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.DateTimeUtil.NextSunday">
            <summary>
            下周的星期天
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DateTimeUtil.ConvertDateTimeToUnix(System.DateTime)">
            <summary>
            把时间转换成Unix时间: 1515133023012
            </summary>
            <param name="time">时间</param>
            <returns>Unix时间</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DateTimeUtil.ToDateTimeOffset(System.Int64)">
            <summary>
            把Unix时间转换成DateTime
            </summary>
            <param name="unixTime">Unix时间</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DateTimeUtil.GetCurrentUnixTimeString">
            <summary>
            获取当前Unix时间
            </summary>
            <returns>Unix时间</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DateTimeUtil.GetCurrentUnixTimeNumber">
            <summary>
            获取当前Unix时间
            </summary>
            <returns>Unix时间</returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.Description">
            <summary>
            任务的描述
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.Description.Owner">
            <summary>
            任务所有者
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.Description.Developer">
            <summary>
            程序的开发者
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.Description.Date">
            <summary>
            程序的开发时间
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.Description.Subject">
            <summary>
            任务主题
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.Description.Email">
            <summary>
            联系邮箱
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.DirectoryExtension">
            <summary>
            文件夹扩展
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DirectoryExtension.CheckAndMakeParentDirecotry(System.String)">
            <summary>
            如果文件夹没有创建, 则帮助创建
            </summary>
            <param name="fullName">文件路径</param>
            <returns>文件夹路径</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DirectoryExtension.CopyTo(System.IO.DirectoryInfo,System.String)">
            <summary>
            复制文件夹
            </summary>
            <param name="source">被复制的文件夹</param>
            <param name="destination">目标文件夹</param>
            <returns></returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.DLog">
            <summary>
            DotnetSpider 日志实现
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.GetLogger">
            <summary>
            取得日志接口
            </summary>
            <returns>日志接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.Log(System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            通过NLog、Http写日志.
            Http日志的开关为: Env.EnterpiseService &amp;&amp; Env.EnterpiseServiceLog
            </summary>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.Log(System.String,System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            通过NLog、Http写日志.
            Http日志的开关为: Env.EnterpiseService &amp;&amp; Env.EnterpiseServiceLog
            </summary>
            <param name="identity">唯一标识</param>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.Trace(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.Debug(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.Info(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.Warn(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.Error(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.Fatal(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.NLog(System.String,System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            仅使用NLog写日志
            </summary>
            <param name="identity">唯一标识</param>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.NLog(System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            仅使用NLog写日志
            </summary>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.HttpLog(System.String,System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            仅使用HTTP写日志
            </summary>
            <param name="identity">唯一标识</param>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.HttpLog(System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            仅使用HTTP写日志
            </summary>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.GetDefaultConfigString">
            <summary>
            取得默认的NLog配置内容
            </summary>
            <returns>NLog配置内容</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.DLog.LoadConfiguration">
            <summary>
            加载配置文件
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.EncodingExtensions">
            <summary>
            编码扩展
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.EncodingExtensions.GetEncoding(System.String,System.Byte[])">
            <summary>
            检测编码类型
            </summary>
            <param name="characterSet">编码名称</param>
            <param name="bytes">被检测的编码</param>
            <returns>编码类型</returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.FileUtil">
            <summary>
            文件操作帮助类
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.FileUtil.PrepareFile(System.String)">
            <summary>
            如果文件所在文件夹没有创建, 则帮助创建
            </summary>
            <param name="fullName">文件路径</param>
            <returns>文件对象</returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.HttpSender">
            <summary>
            HTTP 帮助类
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.HttpSender.Client">
            <summary>
            公用 HttpClient
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.HttpSender.Request(DotnetSpider.Core.Infrastructure.HttpRequest)">
            <summary>
            根据相传入的数据，得到相应页面数据  
            </summary>
            <param name="item">参数类对象</param>  
            <returns>返回HttpResult类型</returns>  
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.HttpSender.Request(System.String)">
            <summary>
            请求链接数据
            </summary>
            <param name="url">链接</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.HttpSender.Request(System.String,System.Text.Encoding)">
            <summary>
            请求链接数据
            </summary>
            <param name="url">链接</param>
            <param name="encoding">编码</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.HttpSender.Request(System.String,System.Net.Http.HttpMethod,System.Text.Encoding)">
            <summary>
            请求链接数据
            </summary>
            <param name="url">链接</param>
            <param name="encoding">编码</param>
            <param name="method">请求方法</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.HttpSender.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>  
            回调验证证书问题  
            </summary>  
            <param name="sender">流对象</param>  
            <param name="certificate">证书</param>  
            <param name="chain">X509Chain</param>  
            <param name="errors">SslPolicyErrors</param>  
            <returns>bool</returns>  
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.HttpRequest">
            <summary>  
            Http请求参考类  
            </summary>  
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.HttpRequest.Version10">
            <summary>
            HTTP 版本
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.HttpRequest.Version11">
            <summary>
            HTTP 版本
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Url">
            <summary>  
            请求URL必须填写  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Method">
            <summary>  
            请求方式默认为GET方式,当为POST方式时必须设置Postdata的值  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Timeout">
            <summary>  
            默认请求超时时间  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.ReadWriteTimeout">
            <summary>  
            默认写入Post数据超时间  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.KeepAlive">
            <summary>  
             获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接默认为true。  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Accept">
            <summary>  
            请求标头值 默认为text/html, application/xhtml+xml, */*  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.ContentType">
            <summary>  
            请求返回类型默认 text/html  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.UserAgent">
            <summary>  
            客户端访问信息默认Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Encoding">
            <summary>  
            返回数据编码默认为NUll,可以自动识别,一般为utf-8,gbk,gb2312  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.PostDataType">
            <summary>  
            Post的数据类型  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Postdata">
            <summary>  
            Post请求时要发送的字符串Post数据  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.PostdataByte">
            <summary>  
            Post请求时要发送的Byte类型的Post数据  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.WebProxy">
            <summary>  
            设置代理对象 
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.CookieCollection">
            <summary>  
            Cookie对象集合  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Cookie">
            <summary>  
            请求时的Cookie  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Referer">
            <summary>  
            来源地址，上次访问地址  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.CerPath">
            <summary>  
            证书绝对路径  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.ResultType">
            <summary>  
            设置返回类型String和Byte  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Header">
            <summary>  
            header对象  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.ProtocolVersion">
            <summary>
            获取或设置用于请求的 HTTP 版本。返回结果:用于请求的 HTTP 版本。
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Expect100Continue">
            <summary>  
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.ClentCertificates">
            <summary>  
            设置509证书集合  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.PostEncoding">
            <summary>  
            设置或获取Post参数编码,默认的为Default编码  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.ResultCookieType">
            <summary>  
            Cookie返回类型,默认的是只返回字符串类型  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Credentials">
            <summary>  
            获取或设置请求的身份验证信息。  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.MaximumAutomaticRedirections">
            <summary>  
            设置请求将跟随的重定向的最大数目  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.IfModifiedSince">
            <summary>  
            获取和设置IfModifiedSince，默认为当前日期和时间  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.AllowAutoRedirect">
            <summary>
            允许自动跳转
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpRequest.Connectionlimit">
            <summary>
            Connectionlimit
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.HttpResult">
            <summary>  
            Http返回参数类  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpResult.Cookie">
            <summary>  
            Http请求返回的Cookie  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpResult.CookieCollection">
            <summary>  
            Cookie对象集合  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpResult.Html">
            <summary>  
            返回的String类型数据 只有ResultType.String时才返回数据，其它情况为空  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpResult.ResultByte">
            <summary>  
            返回的Byte数组 只有ResultType.Byte时才返回数据，其它情况为空  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpResult.Header">
            <summary>  
            header对象  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpResult.StatusDescription">
            <summary>  
            返回状态说明  
            </summary>  
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.HttpResult.StatusCode">
            <summary>  
            返回状态码,默认为OK  
            </summary>  
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.PostDataType">
            <summary>  
            Post的数据格式默认为string  
            </summary>  
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.PostDataType.String">
            <summary>  
            字符串类型，这时编码Encoding可不设置  
            </summary>  
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.PostDataType.Byte">
            <summary>  
            Byte类型，需要设置PostdataByte参数的值编码Encoding可设置为空  
            </summary>  
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.PostDataType.File">
            <summary>  
            传文件，Postdata必须设置为文件的绝对路径，必须设置Encoding的值  
            </summary>  
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.ResultCookieType">
            <summary>  
            Cookie返回类型  
            </summary>  
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.ResultCookieType.String">
            <summary>  
            只返回字符串类型的Cookie  
            </summary>  
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.ResultCookieType.CookieCollection">
            <summary>  
            CookieCollection格式的Cookie集合同时也返回String类型的cookie  
            </summary>  
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.ResultType">
            <summary>  
            返回类型  
            </summary>  
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.ResultType.String">
            <summary>  
            表示只返回字符串 只有Html有数据  
            </summary>  
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.ResultType.Byte">
            <summary>  
            表示返回字符串和字节流 ResultByte和Html都有数据返回  
            </summary>  
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.ILocker">
            <summary>
            锁的接口
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILocker.Lock">
            <summary>
            占用锁
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILocker.Release">
            <summary>
            释放锁
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.Level">
            <summary>
            Defines available log levels.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.Level.Name">
            <summary>
            Gets the name of the log level.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.Level.Ordinal">
            <summary>
            Gets the ordinal of the log level.
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Level.Trace">
            <summary>
            Trace log level.
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Level.Debug">
            <summary>
            Debug log level.
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Level.Info">
            <summary>
            Info log level.
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Level.Warn">
            <summary>
            Warn log level.
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Level.Error">
            <summary>
            Error log level.
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Level.Fatal">
            <summary>
            Fatal log level.
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.Level.Off">
            <summary>
            Off log level.
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.ILogger">
            <summary>
            Provides logging interface and utility functions.
            Http日志的开关为: Env.EnterpiseService &amp;&amp; Env.EnterpiseServiceLog
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.Log(System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            通过NLog、Http写日志.
            Http日志的开关为: Env.EnterpiseService &amp;&amp; Env.EnterpiseServiceLog
            </summary>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.Log(System.String,System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            通过NLog、Http写日志.
            Http日志的开关为: Env.EnterpiseService &amp;&amp; Env.EnterpiseServiceLog
            </summary>
            <param name="identity">唯一标识</param>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.Trace(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.Info(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.Warn(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.Error(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.NLog(System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            仅使用NLog写日志
            </summary>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.NLog(System.String,System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            仅使用NLog写日志
            </summary>
            <param name="identity">唯一标识</param>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.HttpLog(System.String,System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            仅使用HTTP写日志
            </summary>
            <param name="identity">唯一标识</param>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.ILogger.HttpLog(System.String,DotnetSpider.Core.Infrastructure.Level,System.Exception)">
            <summary>
            仅使用HTTP写日志
            </summary>
            <param name="message">信息</param>
            <param name="level">日志级别</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.PriorityBlockingQueue`1">
            <summary>
            优先级的线程安全队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.PriorityBlockingQueue`1.Count">
            <summary>
            当前队列中的元素个数
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.PriorityBlockingQueue`1.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.PriorityBlockingQueue`1.#ctor(System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.PriorityBlockingQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            构造方法
            </summary>
            <param name="comparer">优先级比较器</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.PriorityBlockingQueue`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            构造方法
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <param name="comparer">优先级比较器</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.PriorityBlockingQueue`1.Clear">
            <summary>
            清空队列
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.PriorityBlockingQueue`1.Push(`0)">
            <summary>
            把元素入队
            </summary>
            <param name="v">元素</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.PriorityBlockingQueue`1.Pop">
            <summary>
            元素出队
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.PriorityBlockingQueue`1.Top">
            <summary>
            队列第一个元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.Rasdial">
            <summary>
            通过Process调用rasdial.exe拨号
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Rasdial.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="interfaceName">网络名称</param>
            <param name="username">账号</param>
            <param name="password">密码</param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Rasdial.Connect">
            <summary>
            拨号
            </summary>
            <returns>返回拨号进程的返回值</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.Rasdial.Disconnect">
            <summary>
            断开现有拨号
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.RegexUtil">
            <summary>
            正则表达式帮助类
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.RegexUtil.IpAddress">
            <summary>
            IP正则表达式
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.RegexUtil.Number">
            <summary>
            数字正则表达式
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.RegexUtil.Decimal">
            <summary>
            小数正则表达式
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.RegexUtil.Url">
            <summary>
            URL正则表达式
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.Singleton`1">
            <summary>
            单独的泛型实型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.Singleton`1.Instance">
            <summary>
            单例对象
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.StreamExtensions">
            <summary>
            Stream 的扩展
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.StreamExtensions.ToBytes(System.IO.Stream)">
            <summary>
            Stream 转换成 byte[]
            </summary>
            <param name="stream">Stream</param>
            <returns>byte[]</returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.UrlUtil">
            <summary>
            Url 的帮助类
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.UrlUtil.GetBaseDomain(System.String)">
            <summary>
            取得链接的一级域名
            </summary>
            <param name="url">链接</param>
            <returns>一级域名</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.UrlUtil.CanonicalizeUrl(System.String,System.String)">
            <summary>
            计算最终的URL
            </summary>
            <param name="url">Base uri</param>
            <param name="refer">Relative uri</param>
            <returns>最终的URL</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.UrlUtil.RemoveProtocol(System.String)">
            <summary>
            去掉URL中的协议
            </summary>
            <param name="url">URL</param>
            <returns>去掉协议后的URL</returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.UrlUtil.GetDomain(System.String)">
            <summary>
            取得URL的域名
            </summary>
            <param name="url">链接</param>
            <returns>域名</returns>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.WindowsFormUtil">
            <summary>
            Windows Form 帮助类
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.WindowsFormUtil.FindWindow(System.String,System.String)">
            <summary>
            查找窗口句柄
            </summary>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.WindowsFormUtil.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            查找窗口句柄
            </summary>
            <param name="hwndParent"></param>
            <param name="hwndChildAfter"></param>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.WindowsFormUtil.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            给指定句柄发消息
            </summary>
            <param name="hwnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="F:DotnetSpider.Core.Infrastructure.WindowsFormUtil.WmClose">
            <summary>
            关闭窗口的信号
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Infrastructure.XTokenQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:DotnetSpider.Core.Infrastructure.XTokenQueue.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.AddFirst(System.Char)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.AddFirst(System.String)">
            <summary>
            
            </summary>
            <param name="seq"></param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.Matches(System.String)">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.MatchesRegex(System.String)">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.MatchesCs(System.String)">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.MatchesAny(System.String[])">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.MatchesAny(System.Char[])">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.MatchesStartTag">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.MatchChomp(System.String)">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.MatchesWhitespace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.MatchesWord">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.Advance">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.Consume">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.Consume(System.String)">
            <summary>
            
            </summary>
            <param name="seq"></param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeTo(System.String)">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeToIgnoreCase(System.String)">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeToAny(System.String[])">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeAny(System.String[])">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ChompTo(System.String)">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ChompToIgnoreCase(System.String)">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ChompBalancedQuotes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ChompBalancedNotInQuotes(System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="open"></param>
            <param name="close"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ChompBalanced(System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="open"></param>
            <param name="close"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.Unescape(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeWhitespace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeWord">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeTagName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeElementSelector">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.UnConsume(System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.UnConsume(System.String)">
            <summary>
            
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeCssIdentifier">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeAttributeKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.Remainder">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ContainsAny(System.String[])">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.TrimQuotes(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.In(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="needle"></param>
            <param name="haystack"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.TrimQuotes(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="strs"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ConsumeToUnescaped(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.IsTrue(System.Boolean)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.IsTrue(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <param name="msg"></param>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ParseFuncionParams">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.ParseFuncionParams(System.String)">
            <summary>
            
            </summary>
            <param name="paramStr"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Infrastructure.XTokenQueue.RegionMatches(System.String,System.Boolean,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="toffset"></param>
            <param name="other"></param>
            <param name="ooffset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="T:DotnetSpider.Core.IRunable">
            <summary>
            运行接口定义
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.IRunable.RunAsync(System.String[])">
            <summary>
            异步运行程序
            </summary>
            <param name="arguments">程序运行的参数</param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.IRunable.Run(System.String[])">
            <summary>
            运行程序
            </summary>
            <param name="arguments">程序运行的参数</param>
        </member>
        <member name="T:DotnetSpider.Core.ISpider">
            <summary>
            爬虫接口定义
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ISpider.Site">
            <summary>
            采集站点的信息配置
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ISpider.Monitor">
            <summary>
            监控接口
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.ITask">
            <summary>
            任务接口, 配合企业管理平台使用
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ITask.TaskId">
            <summary>
            任务编号, 单独使用时非必须, 配合企业管理平台使用
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.LogExecuteRecord">
            <summary>
            使用日志记录运行记录
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.LogExecuteRecord.Add(System.String,System.String,System.String)">
            <summary>
            添加运行记录
            </summary>
            <param name="taskId">任务编号</param>
            <param name="name">任务名称</param>
            <param name="identity">任务标识</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:DotnetSpider.Core.LogExecuteRecord.Remove(System.String,System.String,System.String)">
            <summary>
            删除运行记录
            </summary>
            <param name="taskId">任务编号</param>
            <param name="name">任务名称</param>
            <param name="identity">任务标识</param>
        </member>
        <member name="T:DotnetSpider.Core.Monitor.HttpMonitor">
            <summary>
            HTTP爬虫监控状态上报
            在配置文件件添加了serviceUrl才会生效
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Monitor.HttpMonitor.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="apiUrl">上报状态的WebApi入口</param>
        </member>
        <member name="M:DotnetSpider.Core.Monitor.HttpMonitor.Report(System.String,System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            上报爬虫状态
            </summary>
            <param name="identity">唯一标识</param>
            <param name="taskId">任务编号</param>
            <param name="status">爬虫状态: 运行、暂停、退出、完成</param>
            <param name="left">剩余的目标链接数</param>
            <param name="total">总的需要采集的链接数</param>
            <param name="success">成功采集的链接数</param>
            <param name="error">采集出错的链接数</param>
            <param name="avgDownloadSpeed">平均下载一个链接需要的时间(豪秒)</param>
            <param name="avgProcessorSpeed">平均解析一个页面需要的时间(豪秒)</param>
            <param name="avgPipelineSpeed">数据管道处理一次数据结果需要的时间(豪秒)</param>
            <param name="threadNum">爬虫线程数</param>
        </member>
        <member name="T:DotnetSpider.Core.Monitor.IMonitor">
            <summary>
            爬虫监控接口
            用于上报爬虫的状态
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Monitor.IMonitor.Report(System.String,System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            上报爬虫状态
            </summary>
            <param name="identity">唯一标识</param>
            <param name="taskId">任务编号</param>
            <param name="status">爬虫状态: 运行、暂停、退出、完成</param>
            <param name="left">剩余的目标链接数</param>
            <param name="total">总的需要采集的链接数</param>
            <param name="success">成功采集的链接数</param>
            <param name="error">采集出错的链接数</param>
            <param name="avgDownloadSpeed">平均下载一个链接需要的时间(豪秒)</param>
            <param name="avgProcessorSpeed">平均解析一个页面需要的时间(豪秒)</param>
            <param name="avgPipelineSpeed">数据管道处理一次数据结果需要的时间(豪秒)</param>
            <param name="threadNum">爬虫线程数</param>
        </member>
        <member name="T:DotnetSpider.Core.Monitor.ISpeedMonitor">
            <summary>
            爬虫速度监控
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.ISpeedMonitor.AvgDownloadSpeed">
            <summary>
            平均下载一个链接需要的时间(豪秒)
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.ISpeedMonitor.AvgProcessorSpeed">
            <summary>
            平均解析一个页面需要的时间(豪秒)
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.ISpeedMonitor.AvgPipelineSpeed">
            <summary>
            数据管道处理一次数据结果需要的时间(豪秒)
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Monitor.NLogMonitor">
            <summary>
            NLog 状态监控, 依据NLog配置上报状态到控制台或者日志文件中
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Monitor.NLogMonitor.Report(System.String,System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            上报爬虫状态
            </summary>
            <param name="identity">唯一标识</param>
            <param name="taskId">任务编号</param>
            <param name="status">爬虫状态: 运行、暂停、退出、完成</param>
            <param name="left">剩余的目标链接数</param>
            <param name="total">总的需要采集的链接数</param>
            <param name="success">成功采集的链接数</param>
            <param name="error">采集出错的链接数</param>
            <param name="avgDownloadSpeed">平均下载一个链接需要的时间(豪秒)</param>
            <param name="avgProcessorSpeed">平均解析一个页面需要的时间(豪秒)</param>
            <param name="avgPipelineSpeed">数据管道处理一次数据结果需要的时间(豪秒)</param>
            <param name="threadNum">爬虫线程数</param>
        </member>
        <member name="T:DotnetSpider.Core.Monitor.SpiderStatus">
            <summary>
            爬虫状态
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.TaskId">
            <summary>
            任务编号
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.Identity">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.NodeId">
            <summary>
            爬虫节点编号
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.Status">
            <summary>
            爬虫状态: 运行、暂停、退出、完成
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.Thread">
            <summary>
            爬虫线程数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.Left">
            <summary>
            剩余的目标链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.Success">
            <summary>
            成功采集的链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.Error">
            <summary>
            采集出错的链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.Total">
            <summary>
            总的需要采集的链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.AvgDownloadSpeed">
            <summary>
            平均下载一个链接需要的时间(豪秒)
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.AvgProcessorSpeed">
            <summary>
            平均解析一个页面需要的时间(豪秒)
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Monitor.SpiderStatus.AvgPipelineSpeed">
            <summary>
            数据管道处理一次数据结果需要的时间(豪秒)
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Page">
            <summary>
            用于存储下载的内容, 解析到的目标链接等信息
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.ContentType">
            <summary>
            下载的内容类型, 自动识别
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.Url">
            <summary>
            页面的链接
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.TargetUrl">
            <summary>
            最终请求的链接, 当发生30X跳转时与Url的值不一致
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.Request">
            <summary>
            页面的Http请求
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.Retry">
            <summary>
            是否需要重试当前页面
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.SkipExtractTargetUrls">
            <summary>
            对此页面跳过解析目标链接的操作
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.SkipTargetUrls">
            <summary>
            页面解析出来的目标链接不加入到调度队列中
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.Skip">
            <summary>
            页面解析的数据不传入数据管道中作处理
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.ResultItems">
            <summary>
            页面解析的数据结果
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.Content">
            <summary>
            下载到的文本内容
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.Exception">
            <summary>
            下载页面内容时截获的异常
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.TargetRequests">
            <summary>
            页面解析到的目标链接
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Page.Selectable">
            <summary>
            查询器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Page.#ctor(DotnetSpider.Core.Request)">
            <summary>
            构造方法
            </summary>
            <param name="request">请求信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Page.AddResultItem(System.String,System.Object)">
            <summary>
            添加解析到的数据结果
            </summary>
            <param name="key">键值</param>
            <param name="field">数据结果</param>
        </member>
        <member name="M:DotnetSpider.Core.Page.AddTargetRequests(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加解析到的目标链接, 添加到队列中
            </summary>
            <param name="urls">链接</param>
        </member>
        <member name="M:DotnetSpider.Core.Page.AddTargetRequests(System.Collections.Generic.IEnumerable{DotnetSpider.Core.Request})">
            <summary>
            添加解析到的目标链接, 添加到队列中
            </summary>
            <param name="requests">链接</param>
        </member>
        <member name="M:DotnetSpider.Core.Page.AddTargetRequests(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            添加解析到的目标链接, 添加到队列中
            </summary>
            <param name="urls">链接</param>
            <param name="priority">优先级</param>
        </member>
        <member name="M:DotnetSpider.Core.Page.AddTargetRequest(System.String,System.Int32,System.Boolean)">
            <summary>
            添加解析到的目标链接, 添加到队列中
            </summary>
            <param name="url">链接</param>
            <param name="priority">优先级</param>
            <param name="increaseDeep">目标链接的深度是否升高</param>
        </member>
        <member name="M:DotnetSpider.Core.Page.AddTargetRequest(DotnetSpider.Core.Request,System.Boolean)">
            <summary>
            添加解析到的目标链接, 添加到队列中
            </summary>
            <param name="request">链接</param>
            <param name="increaseDeep">目标链接的深度是否升高</param>
        </member>
        <member name="T:DotnetSpider.Core.Pipeline.BaseFilePipeline">
            <summary>
            文件类型数据管理的抽象
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Pipeline.BaseFilePipeline.RootDataFolder">
            <summary>
            数据根目录
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.BaseFilePipeline.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.BaseFilePipeline.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="interval">数据根目录与程序运行目录路径的相对值</param>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.BaseFilePipeline.InitFolder(System.String)">
            <summary>
            初始化需要使用的文件夹
            </summary>
            <param name="interval">数据根目录与程序运行目录路径的相对值</param>
        </member>
        <member name="T:DotnetSpider.Core.Pipeline.BasePipeline">
            <summary>
            数据管道抽象, 通过数据管道把解析的数据存到不同的存储中(文件、数据库）
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Pipeline.BasePipeline.Logger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.BasePipeline.Process(System.Collections.Generic.IEnumerable{DotnetSpider.Core.ResultItems},DotnetSpider.Core.ISpider)">
            <summary>
            处理页面解析器解析到的数据结果
            </summary>
            <param name="resultItems">数据结果</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.BasePipeline.Init">
            <summary>
            在使用数据管道前, 进行一些初始化工作, 不是所有的数据管道都需要进行初始化
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.BasePipeline.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Pipeline.CollectionPipeline">
            <summary>
            所有数据结果存在内存中
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.CollectionPipeline.GetCollection(DotnetSpider.Core.ISpider)">
            <summary>
            获取所有数据结果
            </summary>
            <param name="spider">爬虫</param>
            <returns>数据结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.CollectionPipeline.Process(System.Collections.Generic.IEnumerable{DotnetSpider.Core.ResultItems},DotnetSpider.Core.ISpider)">
            <summary>
            处理页面解析器解析到的数据结果
            </summary>
            <param name="resultItems">数据结果</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.CollectionPipeline.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Pipeline.ConsolePipeline">
            <summary>
            打印数据结果到控制台
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.ConsolePipeline.Process(System.Collections.Generic.IEnumerable{DotnetSpider.Core.ResultItems},DotnetSpider.Core.ISpider)">
            <summary>
            打印数据结果到控制台
            </summary>
            <param name="resultItems">数据结果</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="T:DotnetSpider.Core.Pipeline.FilePipeline">
            <summary>
            存储数据结果到文件中
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.FilePipeline.#ctor">
            <summary>
            数据文件夹地址为: {BaseDirecoty}/data/{Identity}
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.FilePipeline.#ctor(System.String)">
            <summary>
            数据文件夹地址为: {BaseDirecoty}/data/{interval}
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.FilePipeline.Process(System.Collections.Generic.IEnumerable{DotnetSpider.Core.ResultItems},DotnetSpider.Core.ISpider)">
            <summary>
            存储数据结果到文件中
            </summary>
            <param name="resultItems">数据结果</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="T:DotnetSpider.Core.Pipeline.ICollectionPipeline">
            <summary>
            所有数据结果存在内存中.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.ICollectionPipeline.GetCollection(DotnetSpider.Core.ISpider)">
            <summary>
            Get all results collected.
            </summary>
            <returns>All results collected</returns>
        </member>
        <member name="T:DotnetSpider.Core.Pipeline.IPipeline">
            <summary>
            数据管道接口, 通过数据管道把解析的数据存到不同的存储中(文件、数据库）
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.IPipeline.Process(System.Collections.Generic.IEnumerable{DotnetSpider.Core.ResultItems},DotnetSpider.Core.ISpider)">
            <summary>
            处理页面解析器解析到的数据结果
            </summary>
            <param name="resultItems">数据结果</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.IPipeline.Init">
            <summary>
            在使用数据管道前, 进行一些初始化工作, 不是所有的数据管道都需要进行初始化
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Pipeline.JsonFilePipeline">
            <summary>
            数据序列化成JSON并存储到文件中
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.JsonFilePipeline.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.JsonFilePipeline.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="interval">数据根目录与程序运行目录路径的相对值</param>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.JsonFilePipeline.Process(System.Collections.Generic.IEnumerable{DotnetSpider.Core.ResultItems},DotnetSpider.Core.ISpider)">
            <summary>
            数据序列化成JSON并存储到文件中
            </summary>
            <param name="resultItems">数据结果</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="M:DotnetSpider.Core.Pipeline.JsonFilePipeline.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.PrintInfo">
            <summary>
            打印爬虫框架信息的帮助类
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.PrintInfo.Print">
            <summary>
            打印爬虫框架信息
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.PrintInfo.PrintLine(System.Char)">
            <summary>
            打印一整行word到控制台中
            </summary>
            <param name="word">打印的字符</param>
        </member>
        <member name="T:DotnetSpider.Core.Processor.BasePageProcessor">
            <summary>
            页面解析器、抽取器的抽象
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Processor.BasePageProcessor.TargetUrlsExtractor">
            <summary>
            目标链接的解析器、抽取器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.BasePageProcessor.Handle(DotnetSpider.Core.Page)">
            <summary>
            解析操作
            </summary>
            <param name="page">页面数据</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.BasePageProcessor.Process(DotnetSpider.Core.Page,DotnetSpider.Core.ISpider)">
            <summary>
            解析数据结果, 解析目标链接
            </summary>
            <param name="page">页面数据</param>
            <param name="spider">爬虫</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.BasePageProcessor.ExtractUrls(DotnetSpider.Core.Page,DotnetSpider.Core.ISpider)">
            <summary>
            解析目标链接并添加到Page对象中, 供Spider对象添加到对列中
            </summary>
            <param name="page">页面数据</param>
            <param name="spider">爬虫对象</param>
        </member>
        <member name="T:DotnetSpider.Core.Processor.DefaultPageProcessor">
            <summary>
            默认解析器, 没有特别大的作用, 用于测试等
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.DefaultPageProcessor.#ctor(System.String[],System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="partterns">匹配目标链接的正则表达式</param>
            <param name="excludeParterns">排除目标链接的正则表达式</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.DefaultPageProcessor.AddTargetUrlExtractor(System.String,System.String[])">
            <summary>
            添加目标链接解析规则
            </summary>
            <param name="regionXpath">目标链接所在区域</param>
            <param name="patterns">匹配目标链接的正则表达式</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.DefaultPageProcessor.Handle(DotnetSpider.Core.Page)">
            <summary>
            解析页面数据
            </summary>
            <param name="page">页面数据</param>
        </member>
        <member name="T:DotnetSpider.Core.Processor.IPageProcessor">
            <summary>
            页面解析器、抽取器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.IPageProcessor.Process(DotnetSpider.Core.Page,DotnetSpider.Core.ISpider)">
            <summary>
            解析数据结果, 解析目标链接
            </summary>
            <param name="page">页面数据</param>
            <param name="spider">爬虫对象</param>
        </member>
        <member name="T:DotnetSpider.Core.Processor.ITargetUrlsExtractor">
            <summary>
            目标链接的解析、筛选器
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Processor.ITargetUrlsExtractor.TargetUrlsExtractorTermination">
            <summary>
            用于判断当前链接是否最后一个需要采集的链接, 如果是则不需要把解析到的目标链接添加到队列中
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Processor.ITargetUrlsExtractor.TargetUrlPatterns">
            <summary>
            目标链接必须符合的正则表达式
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Processor.ITargetUrlsExtractor.ExcludeTargetUrlPatterns">
            <summary>
            如果目标链接符合正则表达式，则需要排除不添加到目标链接队列中
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.ITargetUrlsExtractor.AddTargetUrlPatterns(System.String[])">
            <summary>
            添加目标链接必须符合的正则表达式
            </summary>
            <param name="patterns">正则表达式</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.ITargetUrlsExtractor.AddExcludeTargetUrlPatterns(System.String[])">
            <summary>
            添加排除目标链接的正则表达式
            </summary>
            <param name="patterns">正则表达式</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.ITargetUrlsExtractor.ExtractRequests(DotnetSpider.Core.Page,DotnetSpider.Core.Site)">
            <summary>
            解析出目标链接, 返回Request的设计是因为有可能需要重新计算PostBody等值, 因此不能直接返回string
            </summary>
            <param name="page">页面数据</param>
            <param name="site">站点信息</param>
            <returns>目标链接</returns>
        </member>
        <member name="T:DotnetSpider.Core.Processor.ITargetUrlsExtractorTermination">
            <summary>
            目标链接解析器的中止器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.ITargetUrlsExtractorTermination.IsTermination(DotnetSpider.Core.Page)">
            <summary>
            Return true, skip all urls from target urls extractor.
            </summary>
            <param name="page">页面数据</param>
            <returns>是否到了最终一个链接</returns>
        </member>
        <member name="T:DotnetSpider.Core.Processor.NullPageProcessor">
            <summary>
            空解析器, 仅用于容错
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.NullPageProcessor.Handle(DotnetSpider.Core.Page)">
            <summary>
            不做任何解析操作
            </summary>
            <param name="page">页面数据</param>
        </member>
        <member name="T:DotnetSpider.Core.Processor.SimplePageProcessor">
            <summary>
            A simple PageProcessor.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.SimplePageProcessor.Handle(DotnetSpider.Core.Page)">
            <summary>
            解析出页面的title和html
            </summary>
            <param name="page">页面数据</param>
        </member>
        <member name="T:DotnetSpider.Core.Processor.TargetUrlsExtractor">
            <summary>
            目标链接的解析、筛选器的抽象
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Processor.TargetUrlsExtractor.TargetUrlPatterns">
            <summary>
            目标链接必须符合的正则表达式
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Processor.TargetUrlsExtractor.ExcludeTargetUrlPatterns">
            <summary>
            如果目标链接符合正则表达式，则需要排除不添加到目标链接队列中
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Processor.TargetUrlsExtractor.TargetUrlsExtractorTermination">
            <summary>
            用于判断当前链接是否最后一个需要采集的链接, 如果是则不需要把解析到的目标链接添加到队列中
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.TargetUrlsExtractor.AddTargetUrlPatterns(System.String[])">
            <summary>
            添加目标链接必须符合的正则表达式
            </summary>
            <param name="patterns">正则表达式</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.TargetUrlsExtractor.AddExcludeTargetUrlPatterns(System.String[])">
            <summary>
            添加排除目标链接的正则表达式
            </summary>
            <param name="patterns">正则表达式</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.TargetUrlsExtractor.ExtractRequests(DotnetSpider.Core.Page,DotnetSpider.Core.Site)">
            <summary>
            解析出目标链接, 返回Request的设计是因为有可能需要重新计算PostBody等值, 因此不能直接返回string
            </summary>
            <param name="page">页面数据</param>
            <param name="site">站点信息</param>
            <returns>目标链接</returns>
        </member>
        <member name="M:DotnetSpider.Core.Processor.TargetUrlsExtractor.Extract(DotnetSpider.Core.Page,DotnetSpider.Core.Site)">
            <summary>
            具体的抽取实现
            </summary>
            <param name="page">页面数据</param>
            <param name="site">站点信息</param>
            <returns>目标链接</returns>
        </member>
        <member name="T:DotnetSpider.Core.Processor.RegionAndPatternTargetUrlsExtractor">
            <summary>
            指定区域下的链接并且需要符合给定正则的链接为符合要求的目标链接
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.RegionAndPatternTargetUrlsExtractor.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.RegionAndPatternTargetUrlsExtractor.#ctor(System.String,System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="regionXpath">目标链接所在区域</param>
            <param name="patterns">目标链接必须匹配的正则表达式</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.RegionAndPatternTargetUrlsExtractor.Extract(DotnetSpider.Core.Page,DotnetSpider.Core.Site)">
            <summary>
            解析出目标链接
            </summary>
            <param name="page">页面数据</param>
            <param name="site">站点信息</param>
            <returns>目标链接</returns>
        </member>
        <member name="M:DotnetSpider.Core.Processor.RegionAndPatternTargetUrlsExtractor.AddTargetUrlExtractor(System.String,System.String[])">
            <summary>
            添加目标链接解析规则
            </summary>
            <param name="regionXpath">目标链接所在区域</param>
            <param name="patterns">匹配目标链接的正则表达式</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.RegionAndPatternTargetUrlsExtractor.ContainsTargetUrlRegion(System.String)">
            <summary>
            Only used for test
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Processor.RegionAndPatternTargetUrlsExtractor.GetTargetUrlPatterns(System.String)">
            <summary>
            Only used for test
            </summary>
            <param name="regionXpath"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Processor.RegionAndPatternTargetUrlsExtractor.FormateUrl(System.String)">
            <summary>
            自定义格式化链接
            </summary>
            <param name="url">目标链接</param>
            <returns>格式化后的链接</returns>
        </member>
        <member name="T:DotnetSpider.Core.Processor.PaginationTargetUrlsExtractor">
            <summary>
            使用分页信息进行解析目标链接
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Processor.PaginationTargetUrlsExtractor.PaginationPattern">
            <summary>
            分页信息的正则表达式
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Processor.PaginationTargetUrlsExtractor.PaginationStr">
            <summary>
            http://a.com?p=40 PaginationStr: p=40 => Pattern: p=\d+
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.PaginationTargetUrlsExtractor.#ctor(System.String,DotnetSpider.Core.Processor.ITargetUrlsExtractorTermination)">
            <summary>
            构造方法
            </summary>
            <param name="paginationStr">分页信息片段： http://a.com?p=40 PaginationStr: p=40</param>
            <param name="termination">中止器</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.PaginationTargetUrlsExtractor.GetCurrentPagination(System.String)">
            <summary>
            取得当前分页
            </summary>
            <param name="currentUrlOrContent">当前链接或者内容(有的分页信息放在Cookie或者Post的内容里)</param>
            <returns></returns>
        </member>
        <member name="T:DotnetSpider.Core.Processor.AutoIncrementTargetUrlsExtractor">
            <summary>
            通过自增计算出新的目标链接, 比如: www.a.com/1.html->www.a.com/2.html
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.AutoIncrementTargetUrlsExtractor.#ctor(System.String,System.Int32,DotnetSpider.Core.Processor.ITargetUrlsExtractorTermination)">
            <summary>
            构造方法
            </summary>
            <param name="paginationStr">URL中分页的部分, 如: www.a.com/content_1.html, 则可以填此值为 content_1.html, tent_1.html等, 框架会把数据部分改成\d+用于正则匹配截取</param>
            <param name="interval">每次自增的间隔</param>
            <param name="termination">中止器, 用于判断是否已到最后一个需要采集的链接</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.AutoIncrementTargetUrlsExtractor.Extract(DotnetSpider.Core.Page,DotnetSpider.Core.Site)">
            <summary>
            解析出目标链接
            </summary>
            <param name="page">页面数据</param>
            <param name="site">站点信息</param>
            <returns>目标链接</returns>
        </member>
        <member name="T:DotnetSpider.Core.Processor.ContainsTermination">
            <summary>
            如果包含指定内容则到了最后一个采集链接
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.ContainsTermination.#ctor(System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="contains">包含的内容</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.ContainsTermination.IsTermination(DotnetSpider.Core.Page)">
            <summary>
            是否到了最后一个链接
            </summary>
            <param name="page">页面数据</param>
            <returns>如果返回 True, 则说明已经采到到了最后一个链接</returns>
        </member>
        <member name="T:DotnetSpider.Core.Processor.UnContainsTermination">
            <summary>
            如果不包含指定内容则到了最后一个采集链接
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.UnContainsTermination.#ctor(System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="unContains">不包含的内容</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.UnContainsTermination.IsTermination(DotnetSpider.Core.Page)">
            <summary>
            是否到了最后一个链接
            </summary>
            <param name="page">页面数据</param>
            <returns>如果返回 True, 则说明已经采到到了最后一个链接</returns>
        </member>
        <member name="T:DotnetSpider.Core.Processor.MaxPageTermination">
            <summary>
            最大分页数限制
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Processor.MaxPageTermination.#ctor(System.String,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="paginationStr">分页信息片段： http://a.com?p=40 PaginationStr: p=40</param>
            <param name="maxPage">最大分页数限制</param>
        </member>
        <member name="M:DotnetSpider.Core.Processor.MaxPageTermination.IsTermination(DotnetSpider.Core.Page)">
            <summary>
            是否到了最后一个链接
            </summary>
            <param name="page">页面数据</param>
            <returns>如果返回 True, 则说明已经采到到了最后一个链接</returns>
        </member>
        <member name="T:DotnetSpider.Core.Proxy.HttpProxyPool">
            <summary>
            代理池
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.HttpProxyPool.#ctor(DotnetSpider.Core.Proxy.IProxySupplier,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="supplier">代理提供接口</param>
            <param name="reuseInterval">代理不被再次使用的间隔</param>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.HttpProxyPool.GetProxy">
            <summary>
            从代理池中取一个代理
            </summary>
            <returns>代理</returns>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.HttpProxyPool.ReturnProxy(DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy,System.Net.HttpStatusCode)">
            <summary>
            把代理返回给代理池
            </summary>
            <param name="proxy">代理</param>
            <param name="statusCode">通过此代理请求数据后的返回状态</param>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.HttpProxyPool.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Proxy.IHttpProxyPool">
            <summary>
            代理池
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.IHttpProxyPool.GetProxy">
            <summary>
            从代理池中取一个代理
            </summary>
            <returns>代理</returns>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.IHttpProxyPool.ReturnProxy(DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy,System.Net.HttpStatusCode)">
            <summary>
            把代理返回给代理池
            </summary>
            <param name="proxy">代理</param>
            <param name="statusCode">通过此代理请求数据后的返回状态</param>
        </member>
        <member name="T:DotnetSpider.Core.Proxy.IProxySupplier">
            <summary>
            代理提供接口
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.IProxySupplier.GetProxies">
            <summary>
            取得所有代理
            </summary>
            <returns>代理</returns>
        </member>
        <member name="T:DotnetSpider.Core.Proxy.KuaidailiProxySupplier">
            <summary>
            实现快代理的提取
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Proxy.KuaidailiProxySupplier.Url">
            <summary>
            快代理的提取接口
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.KuaidailiProxySupplier.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="url">快代理的提取接口</param>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.KuaidailiProxySupplier.GetProxies">
            <summary>
            取得所有代理
            </summary>
            <returns>代理</returns>
        </member>
        <member name="T:DotnetSpider.Core.Proxy.Proxy">
            <summary>
            代理信息
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Proxy.Proxy.WebProxy">
            <summary>
            实际代理信息
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Proxy.Proxy.CanReuseTime">
            <summary>
            下一次可使用的时间
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Proxy.Proxy.ResponseTime">
            <summary>
            通过代理完成一次下载操作消耗的时间
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Proxy.Proxy.FailedNum">
            <summary>
            使用此代理下载数据的失败次数
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.Proxy.#ctor(DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="proxy">实际代理信息</param>
            <param name="reuseTimeInterval">代理不被再次使用的间隔</param>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.Proxy.GetLastUseTime">
            <summary>
            获取上一次使用的时间
            </summary>
            <returns>上一次使用的时间</returns>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.Proxy.SetLastBorrowTime(System.Double)">
            <summary>
            设置上一次使用的时间
            </summary>
            <param name="lastBorrowTime">上一次使用的时间</param>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.Proxy.RecordResponse">
            <summary>
            计算通过代理完成一次下载操作消耗的时间
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.Proxy.Fail">
            <summary>
            记录一次使用此代理下载数据的失败
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.Proxy.GetWebProxy">
            <summary>
            取得实际代理信息
            </summary>
            <returns>实际代理信息</returns>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.Proxy.SetFailedNum(System.Int32)">
            <summary>
            设置使用此代理下载数据的失败次数
            </summary>
            <param name="num">次数</param>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.Proxy.SetReuseTime(System.Int32)">
            <summary>
            设置下一次可使用的时间
            </summary>
            <param name="reuseTimeInterval">代理不被再次使用的间隔</param>
        </member>
        <member name="T:DotnetSpider.Core.Proxy.SingleProxyPool">
            <summary>
            单代理模式
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.SingleProxyPool.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="url">HTTP代理的链接</param>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.SingleProxyPool.#ctor(DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy)">
            <summary>
            构造方法
            </summary>
            <param name="proxy">HTTP代理</param>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.SingleProxyPool.GetProxy">
            <summary>
            从代理池中取一个代理
            </summary>
            <returns>代理</returns>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.SingleProxyPool.ReturnProxy(DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy,System.Net.HttpStatusCode)">
            <summary>
            单代理模式不需要执行还代理操作
            </summary>
            <param name="proxy">代理</param>
            <param name="statusCode">通过此代理请求数据后的返回状态</param>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.SingleProxyPool.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy">
            <summary>
            HTTP代理的封装
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy.Uri">
            <summary>
            代理地址
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy.Credentials">
            <summary>
            凭证
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy.GetProxy(System.Uri)">
            <summary>
            Returns the URI of a proxy.
            </summary>
            <param name="destination">A System.Uri that specifies the requested Internet resource.</param>
            <returns>A System.Uri instance that contains the URI of the proxy used to contact destination.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy.#ctor(System.Uri,System.Net.ICredentials,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="uri">代理的链接</param>
            <param name="credentials">凭证</param>
            <param name="bypass"> Indicates that the proxy should not be used for the specified host.</param>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy.IsBypassed(System.Uri)">
            <summary>
             Indicates that the proxy should not be used for the specified host.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Proxy.UseSpecifiedUriWebProxy.GetHashCode">
            <summary>
            取得哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="T:DotnetSpider.Core.Redial.RedialExecutor">
            <summary>
            <see cref="T:DotnetSpider.Core.Redial.IRedialExecutor"/>
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.WaitAllNetworkRequestComplete">
            <summary>
            等待所有网络通讯结束
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.CreateActionIdentity(System.String)">
            <summary>
            创建通讯标识
            </summary>
            <param name="name">通讯标识前缀</param>
            <returns>通讯标识</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.DeleteActionIdentity(System.String)">
            <summary>
            删除通讯标识
            </summary>
            <param name="identity">通讯标识</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.CreateLocker">
            <summary>
            创建同步锁
            </summary>
            <returns>同步锁</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.IsRedialing">
            <summary>
            判断是否有别的程序正在拨号
            </summary>
            <returns>是否有别的程序正在拨号, 如果有返回 True, 没有则返回 False.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.GetLastRedialTime">
            <summary>
            取得上次拨号的时间, 如果间隔太短则不执行拨号操作
            </summary>
            <returns>上次拨号的时间</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.RecordLastRedialTime">
            <summary>
            记录拨号时间
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Redial.RedialExecutor.SleepAfterRedial">
            <summary>
            拨号成功后暂停的时间
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.Redial(System.Action)">
            <summary>
            执行拨号
            </summary>
            <param name="action">执行完拨号后回调方法</param>
            <returns>拨号结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.Execute(System.String,System.Action)">
            <summary>
            执行网络请求
            </summary>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="action">网络请求的具体操作</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.Execute(System.String,System.Action{System.Object},System.Object)">
            <summary>
            执行网络请求
            </summary>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="action">网络请求的具体操作</param>
            <param name="obj">网络请求需要的参数对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.Execute``1(System.String,System.Func{``0})">
            <summary>
            带返回数据的网络请求
            </summary>
            <typeparam name="T">返回数据</typeparam>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="func">网络请求的具体操作</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.Execute``1(System.String,System.Func{System.Object,``0},System.Object)">
            <summary>
            带返回数据的网络请求
            </summary>
            <typeparam name="T">返回数据</typeparam>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="func">网络请求的具体操作</param>
            <param name="obj">网络请求需要的参数对象</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.#ctor(DotnetSpider.Core.Redial.Redialer.IRedialer,DotnetSpider.Core.Redial.InternetDetector.IInternetDetector)">
            <summary>
            构造方法
            </summary>
            <param name="redialer">拨号器</param>
            <param name="validater">网络状态检测器</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialExecutor.#ctor(DotnetSpider.Core.Redial.Redialer.IRedialer)">
            <summary>
            构造方法
            </summary>
            <param name="redialer">拨号器</param>
        </member>
        <member name="T:DotnetSpider.Core.Redial.FileLockerRedialExecutor">
            <summary>
            通过文件锁锁实现的拨号器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.FileLockerRedialExecutor.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.FileLockerRedialExecutor.#ctor(DotnetSpider.Core.Redial.Redialer.IRedialer)">
            <summary>
            构造方法
            </summary>
            <param name="redialer">拨号器</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.FileLockerRedialExecutor.#ctor(DotnetSpider.Core.Redial.Redialer.IRedialer,DotnetSpider.Core.Redial.InternetDetector.IInternetDetector)">
            <summary>
            构造方法
            </summary>
            <param name="redialer">拨号器</param>
            <param name="validater">网络状态检测器</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.FileLockerRedialExecutor.IsRedialing">
            <summary>
            判断是否有别的程序正在拨号
            </summary>
            <returns>是否有别的程序正在拨号, 如果有返回 True, 没有则返回 False.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.FileLockerRedialExecutor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.FileLockerRedialExecutor.CreateLocker">
            <summary>
            创建同步锁
            </summary>
            <returns>同步锁</returns>
        </member>
        <member name="T:DotnetSpider.Core.Redial.InternetDetector.BaseInternetDetector">
            <summary>
            网络状态检测器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.InternetDetector.BaseInternetDetector.DoValidate">
            <summary>
            检测网络状态
            </summary>
            <returns>如果返回 True, 表示当前可以访问互联网</returns>
        </member>
        <member name="P:DotnetSpider.Core.Redial.InternetDetector.BaseInternetDetector.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.InternetDetector.BaseInternetDetector.Detect">
            <summary>
            检测网络状态
            </summary>
            <returns>如果返回 True, 表示当前可以访问互联网</returns>
        </member>
        <member name="T:DotnetSpider.Core.Redial.InternetDetector.DefaultInternetDetector">
            <summary>
            标准网络状态检测器, 通过PING某个网站是否能通
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.InternetDetector.DefaultInternetDetector.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.InternetDetector.DefaultInternetDetector.#ctor(System.String,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="url">PING的目标链接</param>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.InternetDetector.DefaultInternetDetector.DoValidate">
            <summary>
            检测网络状态
            </summary>
            <returns>如果返回 True, 表示当前可以访问互联网</returns>
        </member>
        <member name="T:DotnetSpider.Core.Redial.InternetDetector.IInternetDetector">
            <summary>
            网络状态检测器
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Redial.InternetDetector.IInternetDetector.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.InternetDetector.IInternetDetector.Detect">
            <summary>
            检测网络状态
            </summary>
            <returns>如果返回 True, 表示当前可以访问互联网</returns>
        </member>
        <member name="T:DotnetSpider.Core.Redial.InternetDetector.VpsInternetDetector">
            <summary>
            自建VPS 可能有多根线路, 其中几根是用于稳定远程, 另几根是IP拨号, 所以不能用PING baidu.com这种形式判断是否拨号成功.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.InternetDetector.VpsInternetDetector.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.InternetDetector.VpsInternetDetector.#ctor(System.Int32,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="networkCount">多少个网络接口数量则为网络正常</param>
            <param name="timeout"></param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.InternetDetector.VpsInternetDetector.#ctor(System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="networkCount">多少个网络接口数量则为网络正常</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.InternetDetector.VpsInternetDetector.DoValidate">
            <summary>
            检测网络状态
            </summary>
            <returns>如果返回 True, 表示当前可以访问互联网</returns>
        </member>
        <member name="T:DotnetSpider.Core.Redial.IRedialExecutor">
            <summary>
            拨号器+网络通讯器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.IRedialExecutor.Redial(System.Action)">
            <summary>
            执行拨号
            </summary>
            <param name="action">执行完拨号后回调方法</param>
            <returns>拨号结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.IRedialExecutor.Execute(System.String,System.Action)">
            <summary>
            执行网络请求
            </summary>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="action">网络请求的具体操作</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.IRedialExecutor.Execute(System.String,System.Action{System.Object},System.Object)">
            <summary>
            执行网络请求
            </summary>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="action">网络请求的具体操作</param>
            <param name="obj">网络请求需要的参数对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.IRedialExecutor.Execute``1(System.String,System.Func{System.Object,``0},System.Object)">
            <summary>
            带返回数据的网络请求
            </summary>
            <typeparam name="T">返回数据</typeparam>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="func">网络请求的具体操作</param>
            <param name="obj">网络请求需要的参数对象</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.IRedialExecutor.Execute``1(System.String,System.Func{``0})">
            <summary>
            带返回数据的网络请求
            </summary>
            <typeparam name="T">返回数据</typeparam>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="func">网络请求的具体操作</param>
            <returns>返回数据</returns>
        </member>
        <member name="T:DotnetSpider.Core.Redial.LocalRedialExecutor">
            <summary>
            单机拨号器+网络通讯器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.LocalRedialExecutor.#ctor(DotnetSpider.Core.Redial.Redialer.IRedialer,DotnetSpider.Core.Redial.InternetDetector.IInternetDetector)">
            <summary>
            构造方法
            </summary>
            <param name="redialer">拨号器</param>
            <param name="validater">网络状态检测器</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.LocalRedialExecutor.CreateActionIdentity(System.String)">
            <summary>
            创建通讯标识
            </summary>
            <param name="name">通讯标识前缀</param>
            <returns>通讯标识</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.LocalRedialExecutor.DeleteActionIdentity(System.String)">
            <summary>
            删除通讯标识
            </summary>
            <param name="identity">通讯标识</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.LocalRedialExecutor.GetLastRedialTime">
            <summary>
            取得上次拨号的时间, 如果间隔太短则不执行拨号操作
            </summary>
            <returns>上次拨号的时间</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.LocalRedialExecutor.RecordLastRedialTime">
            <summary>
            记录拨号时间
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.LocalRedialExecutor.WaitAllNetworkRequestComplete">
            <summary>
            等待所有网络通讯结束
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Redial.MutexRedialExecutor">
            <summary>
            通过进程锁实现的拨号器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.MutexRedialExecutor.#ctor(DotnetSpider.Core.Redial.Redialer.IRedialer,DotnetSpider.Core.Redial.InternetDetector.IInternetDetector)">
            <summary>
            构造方法
            </summary>
            <param name="redialer">拨号器</param>
            <param name="validater">网络状态检测器</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.MutexRedialExecutor.#ctor(DotnetSpider.Core.Redial.Redialer.IRedialer)">
            <summary>
            构造方法
            </summary>
            <param name="redialer">拨号器</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.MutexRedialExecutor.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.MutexRedialExecutor.IsRedialing">
            <summary>
            判断是否有别的程序正在拨号
            </summary>
            <returns>是否有别的程序正在拨号, 如果有返回 True, 没有则返回 False.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.MutexRedialExecutor.CreateLocker">
            <summary>
            创建同步锁
            </summary>
            <returns>同步锁</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.MutexRedialExecutor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Redial.NetworkCenter">
            <summary>
            网络中心, 当一台机器中有多个爬虫在跑时, 下载器、数据管道、URL队列都有可能会用到网络, 需要一个网络中心
            统筹网络通讯, 如在拨号前要完成所有的网络请求->停止所有网络相关活动->拨号->执行网络请求
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Redial.NetworkCenter.Current">
            <summary>
            网络中心单例对象
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Redial.NetworkCenter.Executor">
            <summary>
            拨号器+网络通讯器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.NetworkCenter.Execute(System.String,System.Action)">
            <summary>
            执行网络请求
            </summary>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="action">网络请求的具体操作</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.NetworkCenter.Execute(System.String,System.Action{System.Object},System.Object)">
            <summary>
            执行网络请求
            </summary>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="action">网络请求的具体操作</param>
            <param name="obj">网络请求需要的参数对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.NetworkCenter.Execute``1(System.String,System.Func{``0})">
            <summary>
            带返回数据的网络请求
            </summary>
            <typeparam name="T">返回数据</typeparam>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="func">网络请求的具体操作</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:DotnetSpider.Core.Redial.NetworkCenter.Execute``1(System.String,System.Func{System.Object,``0},System.Object)">
            <summary>
            带返回数据的网络请求
            </summary>
            <typeparam name="T">返回数据</typeparam>
            <param name="name">网络请求名称, 仅用于标识作用</param>
            <param name="func">网络请求的具体操作</param>
            <param name="obj">网络请求需要的参数对象</param>
            <returns>返回数据</returns>
        </member>
        <member name="T:DotnetSpider.Core.Redial.Redialer.AdslRedialer">
            <summary>
            ADSL拨号器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.Redialer.AdslRedialer.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.Redialer.AdslRedialer.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="configPath">配置文件路径. 配置文件内容需要三行, 按顺序为: 网络接口名称, 帐号, 密码</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.Redialer.AdslRedialer.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="interfaceName">网络接口名称</param>
            <param name="user">帐号</param>
            <param name="password">密码</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.Redialer.AdslRedialer.Redial">
            <summary>
            拨号
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Redial.Redialer.BaseAdslRedialer">
            <summary>
            拨号器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.Redialer.BaseAdslRedialer.Redial">
            <summary>
            拨号
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Redial.Redialer.BaseAdslRedialer.Interface">
            <summary>
            网络接口名称
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Redial.Redialer.BaseAdslRedialer.Account">
            <summary>
            帐号
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Redial.Redialer.BaseAdslRedialer.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.Redialer.BaseAdslRedialer.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="interfaceName">网络接口名称</param>
            <param name="account">帐号</param>
            <param name="password">密码</param>
        </member>
        <member name="M:DotnetSpider.Core.Redial.Redialer.BaseAdslRedialer.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Redial.Redialer.IRedialer">
            <summary>
            拨号器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.Redialer.IRedialer.Redial">
            <summary>
            拨号
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Redial.RedialException">
            <summary>
            拨号异常
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Redial.RedialException.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="T:DotnetSpider.Core.Redial.RedialResult">
            <summary>
            拨号结果
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Redial.RedialResult.Failed">
            <summary>
            拨号失败
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Redial.RedialResult.Sucess">
            <summary>
            拨号成功
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Redial.RedialResult.Skip">
            <summary>
            此次拨号跳过
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Redial.RedialResult.OtherRedialed">
            <summary>
            其它程序已执行过拨号
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Request">
            <summary>
            对爬取链接信息的封装
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Site">
            <summary>
            站点信息
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.CountOfResults">
            <summary>
            此链接解析出的数据结果数量
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.EffectedRows">
            <summary>
            所有数据结果插入数据库后实际增加或更新的数量
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.DownloaderGroup">
            <summary>
            下载器分组
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Proxy">
            <summary>
            下载此链接内容时使用的代理
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Depth">
            <summary>
            当前链接的深度, 默认构造的链接深度为1, 用于控制爬取的深度
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.NextDepth">
            <summary>
            当前链接子链接的深度
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.CycleTriedTimes">
            <summary>
            当前链接已经重试的次数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.IsAvailable">
            <summary>
            当前链接是否是合法链接
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Referer">
            <summary>
            请求链接时Referer参数的值
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Origin">
            <summary>
            请求链接时Origin参数的值
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Method">
            <summary>
            请求链接的方法
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Priority">
            <summary>
            链接的优先级, 仅用于优先级队列
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Extras">
            <summary>
            存储此链接对应的额外数据字典
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.PostBody">
            <summary>
            请求此链接时需要POST的数据
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Url">
            <summary>
            请求链接, 请求链接限定为Uri的原因: 无论是本地文件资源或者网络资源都是可以用Uri来定义的
            比如本地文件: file:///C:/Users/Lewis/Desktop/111.png
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Uri">
            <summary>
            请求链接
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.Identity">
            <summary>
            TODO 此链接信息的唯一标识, 可能需要添加更多属性, 如某些场景URL是完成一致, 使用Referer或者Cookie来区别请求
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Request.StatusCode">
            <summary>
            请求此链接后服务器返回的状态码
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Request.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Request.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="url">链接</param>
        </member>
        <member name="M:DotnetSpider.Core.Request.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            构造方法
            </summary>
            <param name="url">链接</param>
            <param name="extras">数据字典</param>
        </member>
        <member name="M:DotnetSpider.Core.Request.GetExtra(System.String)">
            <summary>
            通过键值取得此链接对应的额外信息
            </summary>
            <param name="key">键值</param>
            <returns>额外信息</returns>
        </member>
        <member name="M:DotnetSpider.Core.Request.PutExtra(System.String,System.Object)">
            <summary>
            设置此链接的额外信息
            </summary>
            <param name="key">键值</param>
            <param name="value">额外信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Request.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Request.GetHashCode">
            <summary>
            Gets the System.Type of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Request.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Request.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Request.Clone">
            <summary>
            TODO 重新思考这个克隆方法是否还有作用
            </summary>
            <returns>对爬取链接信息的封装</returns>
        </member>
        <member name="T:DotnetSpider.Core.ResultItems">
            <summary>
            存储页面解析的数据结果
            此对象包含在页面对象中, 并传入数据管道被处理
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ResultItems.Results">
            <summary>
            读取所有数据结果
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ResultItems.Request">
            <summary>
            对应的目标链接信息
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ResultItems.IsEmpty">
            <summary>
            存储的数据结果是否为空
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.ResultItems.GetResultItem(System.String)">
            <summary>
            通过键值取得数据结果
            </summary>
            <param name="key">键值</param>
            <returns>数据结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.ResultItems.AddOrUpdateResultItem(System.String,System.Object)">
            <summary>
            添加或更新数据结果
            </summary>
            <param name="key">键值</param>
            <param name="value">数据结果</param>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.BaseScheduler.Spider">
            <summary>
            爬虫对象
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.BaseScheduler.IncreaseSuccessCount">
            <summary>
            采集成功的链接数加 1
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.BaseScheduler.IncreaseErrorCount">
            <summary>
            采集失败的次数加 1
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.BaseScheduler.Import(System.Collections.Generic.IEnumerable{DotnetSpider.Core.Request})">
            <summary>
            批量导入
            </summary>
            <param name="requests">请求对象</param>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.BaseScheduler.UseInternet">
            <summary>
            是否会使用互联网
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.BaseScheduler.LeftRequestsCount">
            <summary>
            剩余链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.BaseScheduler.TotalRequestsCount">
            <summary>
            总的链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.BaseScheduler.SuccessRequestsCount">
            <summary>
            采集成功的链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.BaseScheduler.ErrorRequestsCount">
            <summary>
            采集失败的次数, 不是链接数, 如果一个链接采集多次都失败会记录多次
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.BaseScheduler.DepthFirst">
            <summary>
            是否深度优先
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.BaseScheduler.Push(DotnetSpider.Core.Request)">
            <summary>
            添加请求对象到队列
            </summary>
            <param name="request">请求对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.BaseScheduler.Init(DotnetSpider.Core.ISpider)">
            <summary>
            初始化队列
            </summary>
            <param name="spider">爬虫对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.BaseScheduler.Poll">
            <summary>
            取得一个需要处理的请求对象
            </summary>
            <returns>请求对象</returns>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.BaseScheduler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.BaseScheduler.Export">
            <summary>
            导出整个队列
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Scheduler.Component.BloomFilterDuplicateRemover">
            <summary>
            BloomFilterDuplicateRemover for huge number of urls.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.Component.BloomFilterDuplicateRemover.TotalRequestsCount">
            <summary>
            Get TotalRequestsCount.
            </summary>
            <returns>TotalRequestsCount</returns>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.Component.BloomFilterDuplicateRemover.#ctor(System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="expectedNumberOfElements">元素个数</param>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.Component.BloomFilterDuplicateRemover.#ctor(System.Double,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="falsePositiveProbability">误判机率</param>
            <param name="expectedInsertions">元素个数</param>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.Component.BloomFilterDuplicateRemover.IsDuplicate(DotnetSpider.Core.Request)">
            <summary>
            Check whether the request is duplicate.
            </summary>
            <param name="request">Request</param>
            <returns>Whether the request is duplicate.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.Component.BloomFilterDuplicateRemover.ResetDuplicateCheck">
            <summary>
            Reset duplicate check.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.Component.BloomFilterDuplicateRemover.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Scheduler.Component.HashSetDuplicateRemover">
            <summary>
            通过哈希去重
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.Component.HashSetDuplicateRemover.TotalRequestsCount">
            <summary>
            Get TotalRequestsCount.
            </summary>
            <returns>TotalRequestsCount</returns>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.Component.HashSetDuplicateRemover.IsDuplicate(DotnetSpider.Core.Request)">
            <summary>
            Check whether the request is duplicate.
            </summary>
            <param name="request">Request</param>
            <returns>Whether the request is duplicate.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.Component.HashSetDuplicateRemover.ResetDuplicateCheck">
            <summary>
            Reset duplicate check.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.Component.HashSetDuplicateRemover.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Scheduler.Component.IDuplicateRemover">
            <summary>
            Remove duplicate requests.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.Component.IDuplicateRemover.IsDuplicate(DotnetSpider.Core.Request)">
            <summary>
            Check whether the request is duplicate.
            </summary>
            <param name="request">Request</param>
            <returns>Whether the request is duplicate.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.Component.IDuplicateRemover.ResetDuplicateCheck">
            <summary>
            Reset duplicate check.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.Component.IDuplicateRemover.TotalRequestsCount">
            <summary>
            Get TotalRequestsCount.
            </summary>
            <returns>TotalRequestsCount</returns>
        </member>
        <member name="T:DotnetSpider.Core.Scheduler.DuplicateRemovedScheduler">
            <summary>
            Remove duplicate urls and only push urls which are not duplicate.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.DuplicateRemovedScheduler.DuplicateRemover">
            <summary>
            去重器
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.DuplicateRemovedScheduler.TotalRequestsCount">
            <summary>
            总的链接数
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.DuplicateRemovedScheduler.ResetDuplicateCheck">
            <summary>
            Reset duplicate check.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.DuplicateRemovedScheduler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.DuplicateRemovedScheduler.PushWhenNoDuplicate(DotnetSpider.Core.Request)">
            <summary>
            如果链接不是重复的就添加到队列中
            </summary>
            <param name="request">请求对象</param>
        </member>
        <member name="T:DotnetSpider.Core.Scheduler.IMonitorable">
            <summary>
            The scheduler whose requests can be counted for monitor.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.IMonitorable.LeftRequestsCount">
            <summary>
            剩余链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.IMonitorable.TotalRequestsCount">
            <summary>
            总的链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.IMonitorable.SuccessRequestsCount">
            <summary>
            采集成功的链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.IMonitorable.ErrorRequestsCount">
            <summary>
            采集失败的次数, 不是链接数, 如果一个链接采集多次都失败会记录多次
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.IMonitorable.IncreaseSuccessCount">
            <summary>
            采集成功的链接数加 1
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.IMonitorable.IncreaseErrorCount">
            <summary>
            采集失败的次数加 1
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Scheduler.IScheduler">
            <summary>
            URL调度队列, 实现广度优化或深度优化策略, 实现URL去重, 并且队列需要可被监控
            考虑性能原因, 队列没有和ISpider的解耦, 因此同一个Scheduler不能被不同的Spider的使用
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.IScheduler.DepthFirst">
            <summary>
            是否深度优先
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.IScheduler.Init(DotnetSpider.Core.ISpider)">
            <summary>
            初始化队列
            </summary>
            <param name="spider">爬虫对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.IScheduler.Push(DotnetSpider.Core.Request)">
            <summary>
            添加请求对象到队列
            </summary>
            <param name="request">请求对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.IScheduler.Poll">
            <summary>
            取得一个需要处理的请求对象
            </summary>
            <returns>请求对象</returns>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.IScheduler.Import(System.Collections.Generic.IEnumerable{DotnetSpider.Core.Request})">
            <summary>
            批量导入
            </summary>
            <param name="requests">请求对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.IScheduler.Export">
            <summary>
            导出整个队列
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler">
            <summary>
            Basic Scheduler implementation.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.UseInternet">
            <summary>
            是否会使用互联网
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.PushWhenNoDuplicate(DotnetSpider.Core.Request)">
            <summary>
            如果链接不是重复的就添加到队列中
            </summary>
            <param name="request">请求对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.ResetDuplicateCheck">
            <summary>
            Reset duplicate check.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.Poll">
            <summary>
            取得一个需要处理的请求对象
            </summary>
            <returns>请求对象</returns>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.LeftRequestsCount">
            <summary>
            剩余链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.SuccessRequestsCount">
            <summary>
            采集成功的链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.ErrorRequestsCount">
            <summary>
            采集失败的次数, 不是链接数, 如果一个链接采集多次都失败会记录多次
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.IncreaseSuccessCount">
            <summary>
            采集成功的链接数加 1
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.IncreaseErrorCount">
            <summary>
            采集失败的次数加 1
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.Import(System.Collections.Generic.IEnumerable{DotnetSpider.Core.Request})">
            <summary>
            批量导入
            </summary>
            <param name="requests">请求对象</param>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.All">
            <summary>
            取得队列中所有的请求对象
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueDuplicateRemovedScheduler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.QueueScheduler.UseInternet">
            <summary>
            是否会使用互联网
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.QueueScheduler.LeftRequestsCount">
            <summary>
            剩余链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.QueueScheduler.SuccessRequestsCount">
            <summary>
            采集成功的链接数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Scheduler.QueueScheduler.ErrorRequestsCount">
            <summary>
            采集失败的次数, 不是链接数, 如果一个链接采集多次都失败会记录多次
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueScheduler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueScheduler.IncreaseErrorCount">
            <summary>
            采集失败的次数加 1
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueScheduler.IncreaseSuccessCount">
            <summary>
            采集成功的链接数加 1
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueScheduler.Poll">
            <summary>
            取得一个需要处理的请求对象
            </summary>
            <returns>请求对象</returns>
        </member>
        <member name="M:DotnetSpider.Core.Scheduler.QueueScheduler.Import(System.Collections.Generic.IEnumerable{DotnetSpider.Core.Request})">
            <summary>
            批量导入
            </summary>
            <param name="requests">请求对象</param>
        </member>
        <member name="T:DotnetSpider.Core.Selector.HtmlSelector">
            <summary>
            HTML文件查询的抽象
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Selector.HtmlSelector.HasAttribute">
            <summary>
            判断查询是否包含属性
            </summary>
            <returns>如果返回 True, 则说明是查询元素的属性值</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.HtmlSelector.Select(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为第一个符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.HtmlSelector.SelectList(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为所有符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.HtmlSelector.Select(System.Object)">
            <summary>
            对Html文本进行查询, 查询结果为第一个符合查询条件的元素
            </summary>
            <param name="text">Html文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.HtmlSelector.SelectList(System.Object)">
            <summary>
            对Html文本进行查询, 查询结果为所有符合查询条件的元素
            </summary>
            <param name="text">Html文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.AbstractSelectable">
            <summary>
            查询接口
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Selector.AbstractSelectable.Elements">
            <summary>
            查找到的所有结果
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.XPath(System.String)">
            <summary>
            通过XPath查找结果
            </summary>
            <param name="xpath">XPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.Css(System.String)">
            <summary>
            通过Css 选择器查找结果
            </summary>
            <param name="css">Css 选择器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.Css(System.String,System.String)">
            <summary>
            通过Css 选择器查找元素, 并取得属性的值
            </summary>
            <param name="css">Css 选择器</param>
            <param name="attrName">查询到的元素的属性</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.Links">
            <summary>
            查找所有的链接
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.Nodes">
            <summary>
            取得查询器里所有的结果
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.JsonPath(System.String)">
            <summary>
            通过JsonPath查找结果
            </summary>
            <param name="jsonPath">JsonPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.Regex(System.String)">
            <summary>
            通过正则表达式查找结果
            </summary>
            <param name="regex">正则表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.Regex(System.String,System.Int32)">
            <summary>
            通过正则表达式查找结果
            </summary>
            <param name="regex">正则表达式</param>
            <param name="group">分组</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.GetValue(DotnetSpider.Core.Selector.ValueOption)">
            <summary>
            获得当前查询器的文本结果, 如果查询结果为多个, 则返回第一个结果的值
            </summary>
            <param name="option">元素取值方式</param>
            <returns>查询到的文本结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.GetValues(DotnetSpider.Core.Selector.ValueOption)">
            <summary>
            获得当前查询器的文本结果, 如果查询结果为多个, 则返回第一个结果的值
            </summary>
            <param name="option">元素取值方式</param>
            <returns>查询到的文本结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.Select(DotnetSpider.Core.Selector.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.AbstractSelectable.SelectList(DotnetSpider.Core.Selector.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.CssSelector">
            <summary>
            CSS 选择器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.CssSelector.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="cssSelector">Css 选择器</param>
        </member>
        <member name="M:DotnetSpider.Core.Selector.CssSelector.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="cssSelector">Css 选择器</param>
            <param name="attrName">属性名称</param>
        </member>
        <member name="M:DotnetSpider.Core.Selector.CssSelector.Select(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为第一个符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.CssSelector.SelectList(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为所有符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="P:DotnetSpider.Core.Selector.CssSelector.HasAttribute">
            <summary>
            判断查询是否包含属性
            </summary>
            <returns>如果返回 True, 则说明是查询元素的属性值</returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.DefaultSelector">
            <summary>
            空的选择器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.DefaultSelector.Select(System.Object)">
            <summary>
            从文本中查询单个结果
            如果符合条件的结果有多个, 仅返回第一个
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.DefaultSelector.SelectList(System.Object)">
            <summary>
            从文本中查询所有结果
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.EnviromentSelector">
            <summary>
            环境变量值查询, 在Request对象中, 可以存入一些初始字典供查询
            还可以查询如: 当天时间等
            此类不需要具体实现, 仅作为标识使用
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Selector.EnviromentSelector.Field">
            <summary>
            查询的键值
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.EnviromentSelector.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="field">查询的键值</param>
        </member>
        <member name="M:DotnetSpider.Core.Selector.EnviromentSelector.Select(System.Object)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.EnviromentSelector.SelectList(System.Object)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.ValueOption">
            <summary>
            元素取值方式
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Selector.ValueOption.None">
            <summary>
            For json content
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Selector.ValueOption.OuterHtml">
            <summary>
            For html content
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Selector.ValueOption.InnerHtml">
            <summary>
            For html content
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Selector.ValueOption.InnerText">
            <summary>
            For html content
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Selector.ISelectable">
            <summary>
            查询接口
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.XPath(System.String)">
            <summary>
            通过XPath查找结果
            </summary>
            <param name="xpath">XPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.Css(System.String)">
            <summary>
            通过Css 选择器查找结果
            </summary>
            <param name="css">Css 选择器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.Css(System.String,System.String)">
            <summary>
            通过Css 选择器查找元素, 并取得属性的值
            </summary>
            <param name="css">Css 选择器</param>
            <param name="attrName">查询到的元素的属性</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.Links">
            <summary>
            查找所有的链接
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.Nodes">
            <summary>
            取得查询器里所有的结果
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.JsonPath(System.String)">
            <summary>
            通过JsonPath查找结果
            </summary>
            <param name="jsonPath">JsonPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.Regex(System.String)">
            <summary>
            通过正则表达式查找结果
            </summary>
            <param name="regex">正则表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.Regex(System.String,System.Int32)">
            <summary>
            通过正则表达式查找结果
            </summary>
            <param name="regex">正则表达式</param>
            <param name="group">分组</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.GetValue(DotnetSpider.Core.Selector.ValueOption)">
            <summary>
            获得当前查询器的文本结果, 如果查询结果为多个, 则返回第一个结果的值
            </summary>
            <param name="option">元素取值方式</param>
            <returns>查询到的文本结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.GetValues(DotnetSpider.Core.Selector.ValueOption)">
            <summary>
            获得当前查询器的文本结果
            </summary>
            <param name="option">元素取值方式</param>
            <returns>查询到的文本结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.Select(DotnetSpider.Core.Selector.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelectable.SelectList(DotnetSpider.Core.Selector.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.ISelector">
            <summary>
            查询器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelector.Select(System.Object)">
            <summary>
            从文本中查询单个结果
            如果符合条件的结果有多个, 仅返回第一个
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.ISelector.SelectList(System.Object)">
            <summary>
            从文本中查询所有结果
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.JsonPathSelector">
            <summary>
            JsonPath selector.
            Used to extract content from JSON.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.JsonPathSelector.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="jsonPath">JsonPath</param>
        </member>
        <member name="M:DotnetSpider.Core.Selector.JsonPathSelector.Select(System.Object)">
            <summary>
            从JSON文本中查询单个结果
            如果符合条件的结果有多个, 仅返回第一个
            </summary>
            <param name="json">需要查询的Json文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.JsonPathSelector.SelectList(System.Object)">
            <summary>
            从JSON文本中查询所有结果
            </summary>
            <param name="json">需要查询的Json文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.RegexSelector">
            <summary>
            正则查询器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.RegexSelector.#ctor(System.String,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="pattern">正则表达式</param>
            <param name="group"></param>
        </member>
        <member name="M:DotnetSpider.Core.Selector.RegexSelector.Select(System.Object)">
            <summary>
            从文本中查询单个结果
            如果符合条件的结果有多个, 仅返回第一个
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.RegexSelector.SelectList(System.Object)">
            <summary>
            从文本中查询所有结果
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.RegexSelector.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.Selectable">
            <summary>
            查询接口
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.#ctor(System.String,System.String,DotnetSpider.Core.Infrastructure.ContentType,System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="text">被查询的文本</param>
            <param name="urlOrPadding">URL相对路径补充或者Json padding的去除</param>
            <param name="contentType">文本内容格式: Html, Json</param>
            <param name="domain">域名, 用于去除外链</param>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.#ctor(System.Collections.Generic.List{System.Object})">
            <summary>
            构造方法
            </summary>
            <param name="nodes">被查询的元素</param>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.Css(System.String)">
            <summary>
            通过Css 选择器查找结果
            </summary>
            <param name="css">Css 选择器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.Css(System.String,System.String)">
            <summary>
            通过Css 选择器查找元素, 并取得属性的值
            </summary>
            <param name="css">Css 选择器</param>
            <param name="attrName">查询到的元素的属性</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.Links">
            <summary>
            查找所有的链接
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.XPath(System.String)">
            <summary>
            通过XPath查找结果
            </summary>
            <param name="xpath">XPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.Select(DotnetSpider.Core.Selector.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.SelectList(DotnetSpider.Core.Selector.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.Nodes">
            <summary>
            取得查询器里所有的结果
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.JsonPath(System.String)">
            <summary>
            通过JsonPath查找结果
            </summary>
            <param name="jsonPath">JsonPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectable.RemovePadding(System.String,System.String)">
            <summary>
            Remove padding for JSON
            </summary>
            <param name="text"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.Selectors">
            <summary>
            查询器的构建帮助类, 相同的查询器会缓存起来.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectors.Regex(System.String)">
            <summary>
            创建正则查询器
            </summary>
            <param name="expr">正则表达式</param>
            <returns>查询器</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectors.Regex(System.String,System.Int32)">
            <summary>
            创建正则查询器
            </summary>
            <param name="expr">正则表达式</param>
            <param name="group"></param>
            <returns>查询器</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectors.Css(System.String)">
            <summary>
            创建Css查询器
            </summary>
            <param name="expr">Css表达式</param>
            <returns>查询器</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectors.Css(System.String,System.String)">
            <summary>
            创建Css查询器
            </summary>
            <param name="expr">Css表达式</param>
            <param name="attrName">属性名称</param>
            <returns>查询器</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectors.XPath(System.String)">
            <summary>
            创建XPath查询器
            </summary>
            <param name="expr">Xpath表达式</param>
            <returns>查询器</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectors.Default">
            <summary>
             创建空查询器
            </summary>
            <returns>查询器</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectors.Enviroment(System.String)">
            <summary>
            创建环境变量值查询器
            </summary>
            <param name="expr">键值</param>
            <returns>查询器</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.Selectors.JsonPath(System.String)">
            <summary>
            创建JsonPath查询器
            </summary>
            <param name="expr">JsonPath表达式</param>
            <returns>查询器</returns>
        </member>
        <member name="T:DotnetSpider.Core.Selector.SelectorType">
            <summary>
            查询器类型
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Selector.SelectorType.XPath">
            <summary>
            XPath
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Selector.SelectorType.Regex">
            <summary>
            Regex
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Selector.SelectorType.Css">
            <summary>
            Css
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Selector.SelectorType.JsonPath">
            <summary>
            JsonPath
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Selector.SelectorType.Enviroment">
            <summary>
            Enviroment
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Selector.XPathSelector">
            <summary>
            Xpath 查询器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Selector.XPathSelector.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="xpath">Xpath表达式</param>
        </member>
        <member name="M:DotnetSpider.Core.Selector.XPathSelector.Select(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为第一个符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:DotnetSpider.Core.Selector.XPathSelector.SelectList(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为所有符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="P:DotnetSpider.Core.Selector.XPathSelector.HasAttribute">
            <summary>
            判断查询是否包含属性
            </summary>
            <returns>如果返回 True, 则说明是查询元素的属性值</returns>
        </member>
        <member name="T:DotnetSpider.Core.Site">
            <summary>
            采集站点的信息配置
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.HttpProxyPool">
            <summary>
            代理池
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.Headers">
            <summary>
            设置全局的HTTP头, 下载器下载数据时会带上所有的HTTP头
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.ContentType">
            <summary>
            配置下载器下载的内容是Json还是Html, 如果是Auto则会自动检测下载的内容, 建议设为Auto
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.RemoveOutboundLinks">
            <summary>
            是否去除外链
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.Domains">
            <summary>
            采集目标的Domain, 如果RemoveOutboundLinks为True, 则Domain不同的链接会被排除, 如果RemoveOutboundLinks为False, 此值没有作用
            需要自行设置
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.UserAgent">
            <summary>
            设置 User Agent 头
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.Accept">
            <summary>
            设置 Accept 头
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.DownloadFiles">
            <summary>
            设置是否下载文件、图片
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.JsonPadding">
            <summary>
            去除返回的JSON数据的最外层填补
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.Timeout">
            <summary>
            不再使用
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.EncodingName">
            <summary>
            设置站点的编码 
            如果没有设值, 下载器会尝试自动识别编码
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.Encoding">
            <summary>
            使用何种编码读取下载的内容, 如果没有设置编码, 下载器会尝试自动识别编码。
            通过设置EncodingName才能修改此值
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Site.StartRequests">
            <summary>
            起始请求
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.SleepTime">
            <summary>
            每处理完一个目标链接后停顿的时间, 单位毫秒 
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.CycleRetryTimes">
            <summary>
            目标链接的最大重试次数
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Site.IsUseGzip">
            <summary>
            目标服务器是否使用了Gzip压缩数据
            默认实现的下载器会自动解压数据, 不需要依赖此值
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Site.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Site.AddStartUrl(System.String)">
            <summary>
            添加一个起始链接到当前站点 
            </summary>
            <param name="startUrl">起始链接</param>
        </member>
        <member name="M:DotnetSpider.Core.Site.AddStartUrl(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            添加一个起始链接到当前站点 
            </summary>
            <param name="startUrl">起始链接</param>
            <param name="datas">链接对应的一些额外数据</param>
        </member>
        <member name="M:DotnetSpider.Core.Site.AddStartUrls(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加多个起始链接到当前站点 
            </summary>
            <param name="startUrls">起始链接</param>
        </member>
        <member name="M:DotnetSpider.Core.Site.AddStartRequest(DotnetSpider.Core.Request)">
            <summary>
            添加一个请求对象到当前站点
            </summary>
            <param name="request">请求对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Site.AddStartRequests(System.Collections.Generic.IEnumerable{DotnetSpider.Core.Request})">
            <summary>
            添加请求对象到当前站点
            </summary>
            <param name="requests">请求对象</param>
        </member>
        <member name="M:DotnetSpider.Core.Site.ClearStartRequests">
            <summary>
            清空所有起始链接
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Site.AddHeader(System.String,System.String)">
            <summary>
            添加一个全局的HTTP请求头 
            </summary>
        </member>
        <member name="T:DotnetSpider.Core.Spider">
            <summary>
            A spider contains four modules: Downloader, Scheduler, PageProcessor and Pipeline. 
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.IfRequireBuildStartRequests(System.String[])">
            <summary>
            是否需要通过StartUrlsBuilder来初始化起始链接
            </summary>
            <param name="arguments">程序运行参数</param>
            <returns>返回 True, 则需要执行所有注册的StartUrlsBulder.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.BuildStartRequestsFinished">
            <summary>
            通过StartUrlsBuilder来初始化起始链接后的响应操作
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.Pipelines">
            <summary>
            All pipelines for spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.PageProcessors">
            <summary>
            Storage all processors for spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.StartTime">
            <summary>
            start time of spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.EndTime">
            <summary>
            end time of spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.WaitInterval">
            <summary>
            Interval time wait for new url.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.Identity">
            <summary>
            Identity of spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.Site">
            <summary>
            Site of spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.IsComplete">
            <summary>
            Whether spider is complete.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.RetriedTimes">
            <summary>
            Record how many times retried.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.Stat">
            <summary>
            Status of spider.
            </summary>
        </member>
        <member name="E:DotnetSpider.Core.Spider.OnSuccess">
            <summary>
            Event of crawler a request success.
            </summary>
        </member>
        <member name="E:DotnetSpider.Core.Spider.OnComplete">
            <summary>
            Event of crawler on comoplete.
            </summary>
        </member>
        <member name="E:DotnetSpider.Core.Spider.OnClosed">
            <summary>
            Event of crawler on closed.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.ClearSchedulerAfterComplete">
            <summary>
            Whether clear scheduler after spider completed.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.Monitor">
            <summary>
            Monitor of spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.AvgDownloadSpeed">
            <summary>
            Average speed downloader.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.AvgProcessorSpeed">
            <summary>
            Average speed processor.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.AvgPipelineSpeed">
            <summary>
            Average speed pipeline.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.StatusReportInterval">
            <summary>
            上报运行状态的间隔
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.PipelineRetryTimes">
            <summary>
            Set the retry times for pipeline.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.Scheduler">
            <summary>
            Scheduler of spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.CachedSize">
            <summary>
            The number of request pipeline handled every time.
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Spider.StartUrlBuilders">
            <summary>
            Start url builders of spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.RedialExecutor">
            <summary>
            Interface used to adsl redial.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.Downloader">
            <summary>
            Downloader of spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.EmptySleepTime">
            <summary>
            Spider will exit if there is no any other request after waitting this time.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.ExitWhenComplete">
            <summary>
            Whether exit spider after complete.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.ThreadNum">
            <summary>
            Thread number of spider.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.Deep">
            <summary>
            How deep spider will crawl.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.SkipTargetUrlsWhenResultIsEmpty">
            <summary>
            Whether skip request when results of processor.
            When results of processor is empty will retry request if this value is false.
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.Spider.Monitorable">
            <summary>
            Monitor to get success count, error count, speed info etc.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.Create(DotnetSpider.Core.Site,DotnetSpider.Core.Processor.IPageProcessor[])">
            <summary>
            Create a spider with pageProcessors.
            </summary>
            <param name="site">网站信息</param>
            <param name="pageProcessors">页面解析器</param>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.Create(DotnetSpider.Core.Site,DotnetSpider.Core.Scheduler.IScheduler,DotnetSpider.Core.Processor.IPageProcessor[])">
            <summary>
            Create a spider with pageProcessors and scheduler.
            </summary>
            <param name="site">网站信息</param>
            <param name="pageProcessors">页面解析器</param>
            <param name="scheduler">调度队列</param>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.Create(DotnetSpider.Core.Site,System.String,DotnetSpider.Core.Scheduler.IScheduler,DotnetSpider.Core.Processor.IPageProcessor[])">
            <summary>
            Create a spider with pageProcessors and scheduler.
            </summary>
            <param name="site">网站信息</param>
            <param name="identify">唯一标识</param>
            <param name="pageProcessors">页面解析器</param>
            <param name="scheduler">调度队列</param>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.#ctor(DotnetSpider.Core.Site)">
            <summary>
            构造方法
            </summary>
            <param name="site">站点信息</param>
        </member>
        <member name="M:DotnetSpider.Core.Spider.#ctor(DotnetSpider.Core.Site,System.String,DotnetSpider.Core.Scheduler.IScheduler,System.Collections.Generic.IEnumerable{DotnetSpider.Core.Processor.IPageProcessor},System.Collections.Generic.IEnumerable{DotnetSpider.Core.Pipeline.IPipeline})">
            <summary>
            Create a spider with site, identity, scheduler and pageProcessors.
            </summary>
            <param name="site">网站信息</param>
            <param name="identity">唯一标识</param>
            <param name="scheduler">调度队列</param>
            <param name="pageProcessors">页面解析器</param>
            <param name="pipelines">数据管道</param>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddToCycleRetry(DotnetSpider.Core.Request,DotnetSpider.Core.Site)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddStartUrlBuilder(DotnetSpider.Core.IStartUrlsBuilder)">
            <summary>
            Add start url builder to spider.
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddStartUrls(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add startUrls to spider. 
            </summary>
            <param name="urls">链接</param>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddStartRequests(System.Collections.Generic.IEnumerable{DotnetSpider.Core.Request})">
            <summary>
            Add start requests to spider. 
            </summary>
            <param name="requests">请求信息</param>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddStartUrl(System.String[])">
            <summary>
            Add urls to crawl.
            </summary>
            <param name="urls">链接</param>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddStartUrl(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Add urls to spider.
            </summary>
            <param name="url">链接</param>
            <param name="extras">Extra properties of request.</param>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddStartRequest(DotnetSpider.Core.Request)">
            <summary>
            Add urls with information to crawl.
            </summary>
            <param name="request">Request</param>
            <returns>Spider</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddStartRequests(DotnetSpider.Core.Request[])">
            <summary>
            Add urls with information to crawl.
            </summary>
            <param name="requests">链接</param>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddPipeline(DotnetSpider.Core.Pipeline.IPipeline)">
            <summary>
            Add a pipeline for Spider
            </summary>
            <param name="pipeline">数据管道</param>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddPageProcessor(DotnetSpider.Core.Processor.IPageProcessor[])">
            <summary>
            Add page processors to spider.
            </summary>
            <param name="processors">页面解析器</param>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.AddPipelines(DotnetSpider.Core.Pipeline.IPipeline[])">
            <summary>
            Set pipelines for Spider
            </summary>
            <param name="pipelines">数据管道</param>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.GetPipelines">
            <summary>
            Used for testing.
            </summary>
            <returns>All pipelines of spider.</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.ClearPipeline">
            <summary>
            Clear the pipelines set
            </summary>
            <returns>爬虫</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.RunApp(System.String[])">
            <summary>
            Run spider.
            </summary>
            <param name="arguments">运行参数</param>
        </member>
        <member name="M:DotnetSpider.Core.Spider.Pause(System.Action)">
            <summary>
            Pause spider.
            </summary>
            <param name="action">暂停完成后执行的回调</param>
        </member>
        <member name="M:DotnetSpider.Core.Spider.Contiune">
            <summary>
            Contiune spider if spider is paused.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.SendExitSignal">
            <summary>
            发送退出信号
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.Exit(System.Action)">
            <summary>
            Exit spider.
            </summary>
            <param name="action">退出完成后执行的回调</param>
        </member>
        <member name="M:DotnetSpider.Core.Spider.Dispose">
            <summary>
            Dispose spider.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.CheckIfSettingsCorrect">
            <summary>
            Check if all settings of spider are correct.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.InitComponent(System.String[])">
            <summary>
            Init component of spider.
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:DotnetSpider.Core.Spider.GetDefaultPipeline">
            <summary>
            Get the default pipeline when user forget set a pepeline to spider.
            </summary>
            <returns>数据管道</returns>
        </member>
        <member name="M:DotnetSpider.Core.Spider.OnClose">
            <summary>
            Event when spider on close.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.SafeDestroyScheduler">
            <summary>
            Event when spider on complete.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.OnError(DotnetSpider.Core.Request)">
            <summary>
            Record error request.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:DotnetSpider.Core.Spider._OnSuccess(DotnetSpider.Core.Request)">
            <summary>
            Event when spider on success.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.HandleRequest(System.Diagnostics.Stopwatch,DotnetSpider.Core.Request,DotnetSpider.Core.Downloader.IDownloader)">
            <summary>
            Single/atom logical to handle a request by downloader, processors and pipelines.
            </summary>
            <param name="stopwatch">计时器</param>
            <param name="request">请求信息</param>
            <param name="downloader">下载器</param>
        </member>
        <member name="M:DotnetSpider.Core.Spider.ExtractAndAddRequests(DotnetSpider.Core.Page)">
            <summary>
            Extract and add target urls to scheduler.
            </summary>
            <param name="page">页面数据</param>
        </member>
        <member name="M:DotnetSpider.Core.Spider.CheckIfRunning">
            <summary>
            Check whether spider is running.
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Spider.InitScheduler(System.String[])">
            <summary>
            初始化调度队列
            </summary>
            <param name="arguments">运行参数</param>
        </member>
        <member name="M:DotnetSpider.Core.Spider.InitPipelines(System.String[])">
            <summary>
            初始化数据管道
            </summary>
            <param name="arguments">运行参数</param>
        </member>
        <member name="T:DotnetSpider.Core.SpiderException">
            <summary>
            爬虫异常
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.SpiderException.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="msg">异常信息</param>
        </member>
        <member name="M:DotnetSpider.Core.SpiderException.#ctor(System.String,System.Exception)">
            <summary>
            构造方法
            </summary>
            <param name="msg">异常信息</param>
            <param name="e">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:DotnetSpider.Core.TaskName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.TaskName.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.TaskName.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="name">任务名称</param>
        </member>
        <member name="T:DotnetSpider.Core.Startup">
            <summary>
            启动任务工具
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Startup.DetectNames">
            <summary>
            DLL名字中包含任意一个即是需要扫描的DLL
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.Startup.Run(System.String[])">
            <summary>
            运行
            </summary>
            <param name="args">运行参数</param>
        </member>
        <member name="M:DotnetSpider.Core.Startup.LoadConfiguration(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            加载环境变量
            </summary>
            <param name="arguments">运行参数</param>
        </member>
        <member name="M:DotnetSpider.Core.Startup.CreateSpiderInstance(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            反射爬虫对象
            </summary>
            <param name="spiderName">名称</param>
            <param name="arguments">运行参数</param>
            <param name="spiderTypes">所有的爬虫类型</param>
            <returns>爬虫对象</returns>
        </member>
        <member name="M:DotnetSpider.Core.Startup.DetectSpiders">
            <summary>
            检测爬虫类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotnetSpider.Core.Startup.AnalyzeArguments(System.String[])">
            <summary>
            分析运行参数
            </summary>
            <param name="args">运行参数</param>
            <returns>运行参数字典</returns>
        </member>
        <member name="M:DotnetSpider.Core.Startup.DetectDlls">
            <summary>
            扫描所有需要求的DLL
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotnetSpider.Core.IStartUrlsBuilder">
            <summary>
            起始链接构造器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.IStartUrlsBuilder.Build(DotnetSpider.Core.Site)">
            <summary>
            构造起始链接对象并添加到网站信息对象中
            </summary>
            <param name="site">网站信息</param>
        </member>
        <member name="T:DotnetSpider.Core.StartUrlsBuilder">
            <summary>
            起始链接构造器
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.StartUrlsBuilder.Build(DotnetSpider.Core.Site)">
            <summary>
            构造起始链接对象并添加到网站信息对象中
            </summary>
            <param name="site">网站信息</param>
        </member>
        <member name="T:DotnetSpider.Core.ForeachStartUrlsBuilder">
            <summary>
            递增的起始链接构造器, 可以设置起始数字, 结束数字, 递增间隔, 链接前、后缀
            如: From = 1, To = 10, Interval = 2, Prefix = www.baidu.com/, Postfix  = .html,
            则最终可以构造出: www.baidu.com/1.html, www.baidu.com/3.html, www.baidu.com/5.html, www.baidu.com/7.html, www.baidu.com/9.html
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachStartUrlsBuilder.From">
            <summary>
            递增开始值
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachStartUrlsBuilder.To">
            <summary>
            递增结束值
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachStartUrlsBuilder.Interval">
            <summary>
            递增间隔
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachStartUrlsBuilder.Prefix">
            <summary>
            URL拼接前缀
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachStartUrlsBuilder.Postfix">
            <summary>
            URL拼接后缀
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.ForeachStartUrlsBuilder.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="min">递增开始值</param>
            <param name="max">递增结束值</param>
            <param name="interval">递增步进</param>
            <param name="prefix">URL拼接前缀</param>
            <param name="postfix">URL拼接后缀</param>
        </member>
        <member name="M:DotnetSpider.Core.ForeachStartUrlsBuilder.Build(DotnetSpider.Core.Site)">
            <summary>
            构造起始链接对象并添加到网站信息对象中
            </summary>
            <param name="site">网站信息</param>
        </member>
        <member name="T:DotnetSpider.Core.ForeachDateStartUrlBuilder">
            <summary>
            递增时间的起始链接构造器, 可以设置起始时间, 结束时间, 时间格式化字符串, 递增间隔, 链接前、后缀
            如: From = 2017-01-01, To = 2017-01-10, Interval = 1, Prefix = www.baidu.com/, Postfix  = .html, DateFormateString = yyyy-MM-dd
            则最终可以构造出: www.baidu.com/2017-01-01.html, www.baidu.com/2017-01-02.html, www.baidu.com/2017-01-03.html...
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachDateStartUrlBuilder.From">
            <summary>
            递增起始时间
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachDateStartUrlBuilder.To">
            <summary>
            递增结束时间
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachDateStartUrlBuilder.Interval">
            <summary>
            递增间隔(天)
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachDateStartUrlBuilder.DateFormateString">
            <summary>
            时间格式化字符串
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachDateStartUrlBuilder.Prefix">
            <summary>
            URL拼接前缀
            </summary>
        </member>
        <member name="P:DotnetSpider.Core.ForeachDateStartUrlBuilder.Postfix">
            <summary>
            URL拼接后缀
            </summary>
        </member>
        <member name="M:DotnetSpider.Core.ForeachDateStartUrlBuilder.#ctor(System.DateTime,System.DateTime,System.Int32,System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="from">递增起始时间</param>
            <param name="to">递增结束时间</param>
            <param name="interval">递增间隔(天)</param>
            <param name="prefix">URL拼接前缀</param>
            <param name="postfix">URL拼接后缀</param>
            <param name="dateFormateString">时间格式化字符串</param>
        </member>
        <member name="M:DotnetSpider.Core.ForeachDateStartUrlBuilder.Build(DotnetSpider.Core.Site)">
            <summary>
            构造起始链接对象并添加到网站信息对象中
            </summary>
            <param name="site">网站信息</param>
        </member>
        <member name="T:DotnetSpider.Core.Status">
            <summary>
            爬虫状态
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Status.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Status.Running">
            <summary>
            正在运行
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Status.Paused">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Status.Finished">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:DotnetSpider.Core.Status.Exited">
            <summary>
            退出
            </summary>
        </member>
    </members>
</doc>
